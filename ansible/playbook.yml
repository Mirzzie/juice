# ---
# - name: Configure EC2 for Juice Shop with DevSecOps Tools (Docker-Based)
#   hosts: juiceshop
#   become: true
#   gather_facts: true

#   vars:
#     juice_shop_dir: /opt/juice-shop
#     node_version: "20"
#     docker_compose_version: "2.23.0"

#   # Load encrypted secrets from vault
#   vars_files:
#     - secrets.yml

#   tasks:
#     # =======================================================================
#     # SYSTEM PREPARATION
#     # =======================================================================
#     - name: Update APT cache
#       apt:
#         update_cache: yes
#         cache_valid_time: 3600

#     - name: Install required system packages
#       apt:
#         name:
#           - curl
#           - wget
#           - git
#           - unzip
#           - software-properties-common
#           - apt-transport-https
#           - ca-certificates
#           - gnupg
#           - lsb-release
#           - jq
#         state: present

#     # =======================================================================
#     # DOCKER INSTALLATION
#     # =======================================================================
#     - name: Add Docker GPG key
#       apt_key:
#         url: https://download.docker.com/linux/ubuntu/gpg
#         state: present

#     - name: Add Docker repository
#       apt_repository:
#         repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
#         state: present

#     - name: Install Docker
#       apt:
#         name:
#           - docker-ce
#           - docker-ce-cli
#           - containerd.io
#           - docker-buildx-plugin
#           - docker-compose-plugin
#         state: present
#         update_cache: yes

#     - name: Add ubuntu user to docker group
#       user:
#         name: ubuntu
#         groups: docker
#         append: yes

#     - name: Start and enable Docker service
#       systemd:
#         name: docker
#         state: started
#         enabled: yes

#     - name: Verify Docker installation
#       command: docker --version
#       register: docker_version
#       changed_when: false

#     - name: Display Docker version
#       debug:
#         msg: "Docker version: {{ docker_version.stdout }}"

#     # =======================================================================
#     # DATADOG AGENT INSTALLATION WITH RETRIES
#     # =======================================================================
#     - name: Check if DataDog agent is already installed
#       stat:
#         path: /etc/datadog-agent
#       register: datadog_installed

#     - name: Download DataDog installation script
#       get_url:
#         url: "https://install.datadoghq.com/scripts/install_script_agent7.sh"
#         dest: /tmp/install_datadog.sh
#         mode: '0755'
#       when: not datadog_installed.stat.exists

#     - name: Install DataDog Agent
#       shell: >
#         DD_API_KEY={{ datadog_api_key }} DD_SITE={{ datadog_site }} bash /tmp/install_datadog.sh
#       args:
#         creates: /etc/datadog-agent/datadog.yaml
#       when: not datadog_installed.stat.exists
#       register: datadog_install
#       retries: 3
#       delay: 15
#       until: datadog_install.rc == 0

#     - name: Configure DataDog Agent for APM and IAST
#       blockinfile:
#         path: /etc/datadog-agent/datadog.yaml
#         block: |
#           # APM Configuration
#           apm_config:
#             enabled: true
#             apm_non_local_traffic: true
#             receiver_port: 8126
#             receiver_timeout: 10
#             max_traces_per_second: 100
          
#           # Application Security Monitoring (ASM)
#           appsec_config:
#             enabled: true
          
#           # Runtime Security
#           runtime_security_config:
#             enabled: true
          
#           # Process monitoring
#           process_config:
#             enabled: "true"
#             scrub_args: true
          
#           # Logs
#           logs_enabled: true
#           logs_config:
#             container_collect_all: true
#         marker: "# {mark} ANSIBLE MANAGED BLOCK - DEVSECOPS CONFIG"
#         create: no
#         backup: yes
#       notify: Restart DataDog Agent

#     - name: Ensure DataDog Agent is running
#       systemd:
#         name: datadog-agent
#         state: started
#         enabled: yes

#     - name: Verify DataDog Agent status
#       command: datadog-agent status
#       register: dd_status
#       changed_when: false
#       failed_when: false

#     - name: Display DataDog Agent status (top lines)
#       debug:
#         msg: "{{ dd_status.stdout_lines[:10] }}"
#       when: dd_status.rc == 0

#     # =======================================================================
#     # APPLICATION DIRECTORY SETUP (files & tracer.ts created by Ansible)
#     # =======================================================================
#     - name: Create application directory
#       file:
#         path: "{{ juice_shop_dir }}"
#         state: directory
#         owner: ubuntu
#         group: ubuntu
#         mode: '0755'

#     - name: Create tracer.ts (DataDog tracer) in app context
#       copy:
#         dest: "{{ juice_shop_dir }}/tracer.ts"
#         content: |
#           import tracer from "dd-trace";
#           tracer.init({
#             service: process.env.DD_SERVICE || "juice-shop",
#             env: process.env.DD_ENV || "production",
#             version: process.env.DD_VERSION || "latest",
#             hostname: process.env.DD_AGENT_HOST || "172.17.0.1",
#             port: process.env.DD_TRACE_AGENT_PORT || "8126",
#             logInjection: process.env.DD_LOGS_INJECTION === "true",
#             sampleRate: parseFloat(process.env.DD_TRACE_SAMPLE_RATE || "1"),
#             profiling: process.env.DD_PROFILING_ENABLED === "true",
#             runtimeMetrics: true,
#             appsec: {
#               enabled: process.env.DD_APPSEC_ENABLED === "true",
#               waf: { timeout: 5000 }
#             },
#             iast: {
#               enabled: process.env.DD_IAST_ENABLED === "true",
#               requestSampling: 100,
#               maxConcurrentRequests: 2
#             },
#             dataStreamsEnabled: process.env.DD_DATA_STREAMS_ENABLED === "true",
#             startupLogs: true
#           });
#           console.log("[DataDog] Tracer initialized");
#           export default tracer;
#         owner: ubuntu
#         group: ubuntu
#         mode: '0644'

#     - name: Create Dockerfile (builder copies tracer.ts from context)
#       copy:
#         dest: "{{ juice_shop_dir }}/Dockerfile"
#         content: |
#           # Multi-stage Dockerfile for Juice Shop with Security Tools
#           FROM node:20-bookworm-slim AS builder
          
#           RUN apt-get update && apt-get install -y git python3 make g++ && rm -rf /var/lib/apt/lists/*
          
#           WORKDIR /juice-shop
#           RUN git clone --depth 1 https://github.com/juice-shop/juice-shop.git . && rm -rf .git
          
#           # Install dependencies and security tools
#           RUN npm install --production && \
#               npm install --save-exact @aikidosec/firewall && \
#               npm install --save dd-trace
          
#           # Copy tracer created by Ansible into build context
#           COPY tracer.ts ./tracer.ts
          
#           # Ensure tracer is imported in server entry (if server.ts exists, app code should reference tracer)
#           # (We attempt to modify server.ts at runtime in container or ensure the app loads tracer at startup.)
          
#           RUN npm run build || echo "Build completed"
          
#           # Production stage
#           FROM node:20-bookworm-slim
#           RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*
#           RUN groupadd -r juiceshop && useradd -r -g juiceshop juiceshop
#           WORKDIR /juice-shop
#           COPY --from=builder --chown=juiceshop:juiceshop /juice-shop /juice-shop
#           USER juiceshop
#           EXPOSE 3000
#           HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
#             CMD curl -f http://localhost:3000/rest/admin/application-version || exit 1
#           ENV NODE_ENV=production PORT=3000
#           # Fix permissions
#           RUN mkdir -p /juice-shop/logs && \
#           chown -R node:node /juice-shop && \
#           chmod -R 755 /juice-shop

#           CMD ["npm", "start"]
#         owner: ubuntu
#         group: ubuntu
#         mode: '0644'

#     - name: Create docker-compose.yml (no 'version' key to avoid warning)
#       copy:
#         dest: "{{ juice_shop_dir }}/docker-compose.yml"
#         content: |
#           services:
#             juice-shop:
#               build: .
#               image: juice-shop-secure:latest
#               container_name: juice-shop
#               restart: unless-stopped
#               ports:
#                 - "3000:3000"
#               env_file:
#                 - .env
#               environment:
#                 NODE_ENV: production
#                 DD_AGENT_HOST: 172.17.0.1
#                 DD_TRACE_AGENT_PORT: 8126
#                 DD_SERVICE: juice-shop
#                 DD_LOGS_INJECTION: "true"
#                 DD_TRACE_SAMPLE_RATE: "1"
#                 DD_PROFILING_ENABLED: "true"
#                 DD_APPSEC_ENABLED: "true"
#                 DD_IAST_ENABLED: "true"
#               extra_hosts:
#                 - "host.docker.internal:host-gateway"
#               healthcheck:
#                 test: ["CMD", "curl", "-f", "http://localhost:3000"]
#                 interval: 30s
#                 timeout: 10s
#                 retries: 3
#                 start_period: 60s
#               logging:
#                 driver: "json-file"
#                 options:
#                   max-size: "10m"
#                   max-file: "3"
#         owner: ubuntu
#         group: ubuntu
#         mode: '0644'

#     - name: Create .env.template
#       copy:
#         dest: "{{ juice_shop_dir }}/.env.template"
#         content: |
#           # Aikido Zen Firewall
#           AIKIDO_TOKEN=AIK_RUN_XXXXXXXXX
#           AIKIDO_BLOCK=false
#           AIKIDO_DEBUG=true
          
#           # DataDog (API key not needed in container, agent is on host)
#           DD_ENV=production
#           DD_VERSION=latest
#         owner: ubuntu
#         group: ubuntu
#         mode: '0644'

#     - name: Create .env file with secrets
#       copy:
#         dest: "{{ juice_shop_dir }}/.env"
#         content: |
#           AIKIDO_TOKEN={{ aikido_token }}
#           AIKIDO_BLOCK=false
#           AIKIDO_DEBUG=true
#           DD_ENV=production
#           DD_VERSION=latest
#         owner: ubuntu
#         group: ubuntu
#         mode: '0600'
#       no_log: true

#     # =======================================================================
#     # DEPLOYMENT SCRIPTS
#     # =======================================================================
#     - name: Create deployment script
#       copy:
#         dest: "{{ juice_shop_dir }}/deploy.sh"
#         content: |
#           #!/bin/bash
#           set -e
#           cd "{{ juice_shop_dir }}"
          
#           echo "======================================"
#           echo "Deploying Juice Shop with Security Tools"
#           echo "======================================"
          
#           # Stop existing containers
#           echo "Stopping existing containers..."
#           docker compose down || true
          
#           # Build new image
#           echo "Building Docker image..."
#           docker compose build --no-cache
          
#           # Start containers
#           echo "Starting containers..."
#           docker compose up -d
          
#           # Wait for health check
#           echo "Waiting for application to be healthy..."
#           sleep 30
          
#           # Verify
#           if docker ps | grep -q juice-shop; then
#             echo "✅ Deployment successful!"
#             docker compose logs --tail=50
#           else
#             echo "❌ Deployment failed!"
#             docker compose logs
#             exit 1
#           fi
#         owner: ubuntu
#         group: ubuntu
#         mode: '0755'

#     - name: Create health check script
#       copy:
#         dest: "{{ juice_shop_dir }}/health-check.sh"
#         content: |
#           #!/bin/bash
#           echo "=== Health Check ==="
          
#           # Container status
#           if docker ps | grep -q juice-shop; then
#             echo "✅ Container: Running"
#           else
#             echo "❌ Container: Not running"
#             exit 1
#           fi
          
#           # Application health
#           if curl -f -s http://localhost:3000 > /dev/null; then
#             echo "✅ Application: Responding"
#           else
#             echo "❌ Application: Not responding"
#             exit 1
#           fi
          
#           # Check logs for security tools
#           echo ""
#           echo "Security Tools Status:"
#           docker logs juice-shop 2>&1 | grep -i "aikido" | tail -3 || echo "⚠ Aikido logs not found"
#           docker logs juice-shop 2>&1 | grep -i "datadog" | tail -3 || echo "⚠ DataDog logs not found"
          
#           echo ""
#           echo "=== Health Check Complete ==="
#         owner: ubuntu
#         group: ubuntu
#         mode: '0755'

#     # =======================================================================
#     # FIREWALL CONFIGURATION
#     # =======================================================================
#     - name: Configure UFW firewall
#       block:
#         - name: Install UFW
#           apt:
#             name: ufw
#             state: present

#         - name: Allow SSH
#           ufw:
#             rule: allow
#             port: '22'
#             proto: tcp

#         - name: Allow Juice Shop
#           ufw:
#             rule: allow
#             port: '3000'
#             proto: tcp

#         - name: Allow DataDog APM
#           ufw:
#             rule: allow
#             port: '8126'
#             proto: tcp

#         - name: Enable UFW
#           ufw:
#             state: enabled
#             policy: deny

#     # =======================================================================
#     # COMPLETION
#     # =======================================================================
#     - name: Display deployment instructions
#       debug:
#         msg:
#           - "============================================"
#           - "Configuration Complete!"
#           - "============================================"
#           - ""
#           - "Next steps:"
#           - "1. SSH to the instance"
#           - "2. cd {{ juice_shop_dir }}"
#           - "3. Verify .env file has correct tokens"
#           - "4. Run: ./deploy.sh"
#           - ""
#           - "Health check: ./health-check.sh"
#           - "View logs: docker compose logs -f"
#           - ""
#           - "Security Dashboards:"
#           - "- Aikido: https://app.aikido.dev"
#           - "- DataDog: https://app.{{ datadog_site }}/security/appsec"

#   handlers:
#     - name: Restart DataDog Agent
#       systemd:
#         name: datadog-agent
#         state: restarted


---
- name: Configure EC2 for Juice Shop with DevSecOps Tools (Docker-Based)
  hosts: juiceshop
  become: true
  gather_facts: true

  vars:
    juice_shop_dir: /opt/juice-shop
    node_version: "22"
    docker_compose_version: "2.23.0"

  vars_files:
    - secrets.yml

  tasks:
    ########################################################################
    # SYSTEM PREPARATION
    ########################################################################
    - name: Update APT cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required system packages
      apt:
        name:
          - curl
          - wget
          - git
          - unzip
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - jq
        state: present

    ########################################################################
    # DOCKER INSTALLATION
    ########################################################################
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker and Compose plugin
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Start and enable Docker
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Verify Docker installation
      command: docker --version
      register: docker_version
      changed_when: false

    - name: Display Docker version
      debug:
        msg: "Docker version: {{ docker_version.stdout }}"

    ########################################################################
    # DATADOG AGENT INSTALLATION
    ########################################################################
    - name: Check if Datadog Agent is installed
      stat:
        path: /etc/datadog-agent
      register: datadog_installed

    - name: Download Datadog install script
      get_url:
        url: "https://install.datadoghq.com/scripts/install_script_agent7.sh"
        dest: /tmp/install_datadog.sh
        mode: '0755'
      when: not datadog_installed.stat.exists

    - name: Install Datadog Agent
      shell: >
        DD_API_KEY={{ datadog_api_key }} DD_SITE={{ datadog_site }} bash /tmp/install_datadog.sh
      args:
        creates: /etc/datadog-agent/datadog.yaml
      when: not datadog_installed.stat.exists
      register: datadog_install
      retries: 3
      delay: 15
      until: datadog_install.rc == 0

    - name: Configure Datadog Agent for APM, AppSec, and IAST
      blockinfile:
        path: /etc/datadog-agent/datadog.yaml
        block: |
          apm_config:
            enabled: true
            apm_non_local_traffic: true
          appsec_config:
            enabled: true
          runtime_security_config:
            enabled: true
          process_config:
            enabled: "true"
            scrub_args: true
          logs_enabled: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK - DEVSECOPS CONFIG"
        create: no
        backup: yes
      notify: Restart Datadog Agent

    - name: Ensure Datadog Agent is running
      systemd:
        name: datadog-agent
        state: started
        enabled: yes

    ########################################################################
    # APPLICATION DIRECTORY SETUP
    ########################################################################
    - name: Create Juice Shop directory
      file:
        path: "{{ juice_shop_dir }}"
        state: directory
        mode: '0755'

    - name: Create tracer.ts (Datadog tracer)
      copy:
        dest: "{{ juice_shop_dir }}/tracer.ts"
        content: |
          import tracer from "dd-trace";
          tracer.init({
            service: process.env.DD_SERVICE || "juice-shop",
            env: process.env.DD_ENV || "production",
            version: process.env.DD_VERSION || "latest",
            hostname: process.env.DD_AGENT_HOST || "172.17.0.1",
            port: process.env.DD_TRACE_AGENT_PORT || "8126",
            appsec: { enabled: true },
            iast: { enabled: true },
          });
          console.log("[DataDog] Tracer initialized");
          export default tracer;
        mode: '0644'

    ########################################################################
    # DOCKERFILE CREATION (NODE 22 + SECURITY TOOLS)
    ########################################################################
    - name: Create Dockerfile
      copy:
        dest: "{{ juice_shop_dir }}/Dockerfile"
        content: |
          FROM node:22-bookworm-slim AS builder
          RUN apt-get update && apt-get install -y git python3 make g++ curl && rm -rf /var/lib/apt/lists/*
          WORKDIR /juice-shop
          RUN git clone --depth 1 https://github.com/juice-shop/juice-shop.git . && rm -rf .git
          COPY tracer.ts ./tracer.ts
          RUN npm install --production && npm install --save-exact @aikidosec/firewall dd-trace
          RUN npm run build || echo "Build skipped"

          FROM node:22-bookworm-slim
          WORKDIR /juice-shop
          COPY --from=builder /juice-shop .
          RUN useradd -r -s /bin/false juiceshop && chown -R juiceshop:juiceshop /juice-shop
          USER juiceshop
          EXPOSE 3000
          ENV DD_IAST_ENABLED=true
          ENV NODE_ENV=production
          HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
            CMD curl -f http://localhost:3000/rest/admin/application-version || exit 1
          CMD ["npm", "start"]
        mode: '0644'

    ########################################################################
    # DOCKER COMPOSE + ENV SETUP
    ########################################################################
    - name: Create .env file
      copy:
        dest: "{{ juice_shop_dir }}/.env"
        content: |
          DD_API_KEY={{ datadog_api_key }}
          DD_SITE={{ datadog_site }}
          DD_ENV=production
          DD_SERVICE=juice-shop
          DD_VERSION=1.0.0
          DD_AGENT_HOST=172.17.0.1
          DD_TRACE_AGENT_PORT=8126
          DD_IAST_ENABLED=true
          NODE_ENV=production
        mode: '0600'

    - name: Create docker-compose.yml
      copy:
        dest: "{{ juice_shop_dir }}/docker-compose.yml"
        content: |
          version: "3.9"
          services:
            juice-shop:
              build: .
              container_name: juice-shop
              restart: always
              ports:
                - "3000:3000"
              env_file:
                - .env
              environment:
                - DD_IAST_ENABLED=true
                - DD_APPSEC_ENABLED=true
                - DD_TRACE_ENABLED=true
                - NODE_ENV=production
              labels:
                com.datadoghq.ad.logs: '[{"source": "nodejs", "service": "juice-shop"}]'
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3000"]
                interval: 30s
                timeout: 10s
                retries: 3
              networks:
                - juice_net
          networks:
            juice_net:
              driver: bridge
        mode: '0644'

    ########################################################################
    # DEPLOYMENT SCRIPT
    ########################################################################
    - name: Create deployment script
      copy:
        dest: "{{ juice_shop_dir }}/deploy.sh"
        mode: '0755'
        content: |
          #!/bin/bash
          set -e
          cd {{ juice_shop_dir }}
          echo "=============================="
          echo "Deploying Juice Shop with Docker"
          echo "=============================="
          if [ ! -f .env ]; then
            echo "Error: .env file not found!"
            exit 1
          fi
          docker compose down || true
          docker compose build --no-cache
          docker compose up -d
          echo "Deployment complete!"
          docker ps

    ########################################################################
    # FIREWALL CONFIGURATION
    ########################################################################
    - name: Allow ports 22, 80, 443, 3000
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - "22"
        - "80"
        - "443"
        - "3000"

    - name: Enable UFW firewall
      ufw:
        state: enabled
        policy: deny

    ########################################################################
    # DEPLOY APPLICATION (SAFE RECONNECT)
    ########################################################################
    - name: Wait for SSH reconnection after firewall
      wait_for_connection:
        timeout: 120

    - name: Run Juice Shop deployment
      shell: bash {{ juice_shop_dir }}/deploy.sh
      args:
        chdir: "{{ juice_shop_dir }}"
      register: deploy_output
      become: true

    - name: Display deployment logs
      debug:
        var: deploy_output.stdout_lines

  ########################################################################
  # HANDLERS
  ########################################################################
  handlers:
    - name: Restart Datadog Agent
      systemd:
        name: datadog-agent
        state: restarted
