---
- name: Configure EC2 for Juice Shop with DevSecOps Tools (Docker-Based)
  hosts: juiceshop
  become: true
  gather_facts: true

  vars:
    juice_shop_dir: /opt/juice-shop
    node_version: "22"
    docker_compose_version: "2.23.0"

  # Load encrypted secrets from vault
  vars_files:
    - secrets.yml

  tasks:
    # =======================================================================
    # SYSTEM PREPARATION
    # =======================================================================
    - name: Update APT cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required system packages
      apt:
        name:
          - curl
          - wget
          - git
          - unzip
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - jq
        state: present

    # =======================================================================
    # DOCKER INSTALLATION
    # =======================================================================
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Verify Docker installation
      command: docker --version
      register: docker_version
      changed_when: false

    - name: Display Docker version
      debug:
        msg: "Docker version: {{ docker_version.stdout }}"

    # =======================================================================
    # DATADOG AGENT INSTALLATION WITH RETRIES
    # =======================================================================
    - name: Check if DataDog agent is already installed
      stat:
        path: /etc/datadog-agent
      register: datadog_installed

    - name: Download DataDog installation script
      get_url:
        url: "https://install.datadoghq.com/scripts/install_script_agent7.sh"
        dest: /tmp/install_datadog.sh
        mode: '0755'
      when: not datadog_installed.stat.exists

    - name: Install DataDog Agent
      shell: >
        DD_API_KEY={{ datadog_api_key }} DD_SITE={{ datadog_site }} bash /tmp/install_datadog.sh
      args:
        creates: /etc/datadog-agent/datadog.yaml
      when: not datadog_installed.stat.exists
      register: datadog_install
      retries: 3
      delay: 15
      until: datadog_install.rc == 0

    - name: Configure DataDog Agent for APM and IAST
      blockinfile:
        path: /etc/datadog-agent/datadog.yaml
        block: |
          apm_config:
            enabled: true
            apm_non_local_traffic: true
            receiver_port: 8126
            receiver_timeout: 10
            max_traces_per_second: 100
          
          appsec_config:
            enabled: true
          
          runtime_security_config:
            enabled: true
          
          process_config:
            enabled: "true"
            scrub_args: true
          
          logs_enabled: true
          logs_config:
            container_collect_all: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK - DEVSECOPS CONFIG"
        create: no
        backup: yes
      notify: Restart DataDog Agent

    - name: Ensure DataDog Agent is running
      systemd:
        name: datadog-agent
        state: started
        enabled: yes

    - name: Verify DataDog Agent status
      command: datadog-agent status
      register: dd_status
      changed_when: false
      failed_when: false

    - name: Display DataDog Agent status (top lines)
      debug:
        msg: "{{ dd_status.stdout_lines[:10] }}"
      when: dd_status.rc == 0

    # =======================================================================
    # APPLICATION DIRECTORY & CODE MODIFICATIONS
    # =======================================================================
    - name: Create application directory
      file:
        path: "{{ juice_shop_dir }}"
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Create Datadog tracer (minimal)
      copy:
        dest: "{{ juice_shop_dir }}/tracer.ts"
        content: |
          import tracer from "dd-trace";
          tracer.init(); // Initialized globally for all instrumented modules
          export default tracer;
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Insert Aikido + Datadog imports into Juice Shop entry file
      block:
        - name: Detect server.ts
          stat:
            path: "{{ juice_shop_dir }}/server.ts"
          register: server_ts

        - name: Detect server.js
          stat:
            path: "{{ juice_shop_dir }}/server.js"
          register: server_js

        - name: Patch server.ts
          blockinfile:
            path: "{{ juice_shop_dir }}/server.ts"
            insertafter: BOF
            marker: "# {mark} ANSIBLE MANAGED BLOCK - SECURITY IMPORTS"
            block: |
              require('@aikidosec/firewall');
              import "./tracer";
          when: server_ts.stat.exists

        - name: Patch server.js
          blockinfile:
            path: "{{ juice_shop_dir }}/server.js"
            insertafter: BOF
            marker: "# {mark} ANSIBLE MANAGED BLOCK - SECURITY IMPORTS"
            block: |
              require('@aikidosec/firewall');
              require("./tracer");
          when: server_js.stat.exists

    # =======================================================================
    # DOCKER CONFIGURATION
    # =======================================================================
    - name: Create Dockerfile (Node 22 + Security Agents)
      copy:
        dest: "{{ juice_shop_dir }}/Dockerfile"
        content: |
          FROM node:22-bookworm-slim AS builder
          RUN apt-get update && apt-get install -y git python3 make g++ && rm -rf /var/lib/apt/lists/*
          WORKDIR /juice-shop
          RUN git clone --depth 1 https://github.com/juice-shop/juice-shop.git . && rm -rf .git
          RUN npm install --production
          RUN npm install --save-exact @aikidosec/firewall
          RUN npm install --save dd-trace
          COPY tracer.ts ./tracer.ts
          RUN npm run build || echo "Build skipped"

          FROM node:22-bookworm-slim
          RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*
          RUN groupadd -r juiceshop && useradd -r -g juiceshop juiceshop
          WORKDIR /juice-shop
          COPY --from=builder --chown=juiceshop:juiceshop /juice-shop /juice-shop
          USER juiceshop

          ENV NODE_ENV=production \
              DD_ENV=production \
              DD_LOGS_INJECTION=true \
              DD_TRACE_SAMPLE_RATE=1 \
              DD_PROFILING_ENABLED=true \
              DD_APPSEC_ENABLED=true \
              DD_IAST_ENABLED=true \
              DD_DATA_STREAMS_ENABLED=true \
              AIKIDO_BLOCK=false \
              AIKIDO_DEBUG=true

          EXPOSE 3000
          HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
            CMD curl -f http://localhost:3000/rest/admin/application-version || exit 1

          CMD ["npm", "start"]
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Create docker-compose.yml (with Datadog Agent host)
      copy:
        dest: "{{ juice_shop_dir }}/docker-compose.yml"
        content: |
          services:
            juice-shop:
              build: .
              image: juice-shop-secure:latest
              container_name: juice-shop
              restart: unless-stopped
              ports:
                - "3000:3000"
              env_file:
                - .env
              environment:
                NODE_ENV: production
                DD_AGENT_HOST: 172.17.0.1
                DD_TRACE_AGENT_PORT: 8126
                DD_SERVICE: juice-shop
                DD_LOGS_INJECTION: "true"
                DD_TRACE_SAMPLE_RATE: "1"
                DD_PROFILING_ENABLED: "true"
                DD_APPSEC_ENABLED: "true"
                DD_IAST_ENABLED: "true"
              extra_hosts:
                - "host.docker.internal:host-gateway"
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3000"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 60s
              logging:
                driver: "json-file"
                options:
                  max-size: "10m"
                  max-file: "3"
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Create .env.template
      copy:
        dest: "{{ juice_shop_dir }}/.env.template"
        content: |
          AIKIDO_TOKEN=AIK_RUN_XXXXXXXXX
          AIKIDO_BLOCK=false
          AIKIDO_DEBUG=true
          DD_ENV=production
          DD_VERSION=latest
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Create .env file with secrets
      copy:
        dest: "{{ juice_shop_dir }}/.env"
        content: |
          AIKIDO_TOKEN={{ aikido_token }}
          AIKIDO_BLOCK=false
          AIKIDO_DEBUG=true
          DD_ENV=production
          DD_VERSION=latest
        owner: ubuntu
        group: ubuntu
        mode: '0600'
      no_log: true

    # =======================================================================
    # DEPLOYMENT SCRIPTS
    # =======================================================================
    - name: Create deploy.sh
      copy:
        dest: "{{ juice_shop_dir }}/deploy.sh"
        content: |
          #!/bin/bash
          set -e
          cd "{{ juice_shop_dir }}"
          echo "Deploying Juice Shop with Security Tools..."
          docker compose down || true
          docker compose build --no-cache
          docker compose up -d
          sleep 30
          if docker ps | grep -q juice-shop; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
            docker compose logs
            exit 1
          fi
        mode: '0755'

    - name: Create health-check.sh
      copy:
        dest: "{{ juice_shop_dir }}/health-check.sh"
        content: |
          #!/bin/bash
          echo "=== Health Check ==="
          if docker ps | grep -q juice-shop; then
            echo "✅ Container running"
          else
            echo "❌ Container not running"
            exit 1
          fi
          if curl -fs http://localhost:3000 >/dev/null; then
            echo "✅ App responding"
          else
            echo "❌ App not responding"
            exit 1
          fi
          docker logs juice-shop | grep -i "datadog" | tail -3 || echo "⚠ No Datadog logs"
          docker logs juice-shop | grep -i "aikido" | tail -3 || echo "⚠ No Aikido logs"
        mode: '0755'

    # =======================================================================
    # FIREWALL CONFIGURATION
    # =======================================================================
    - name: Configure UFW firewall
      block:
        - name: Install UFW
          apt:
            name: ufw
            state: present

        - name: Allow SSH
          ufw:
            rule: allow
            port: '22'
            proto: tcp

        - name: Allow Juice Shop
          ufw:
            rule: allow
            port: '3000'
            proto: tcp

        - name: Allow Datadog APM
          ufw:
            rule: allow
            port: '8126'
            proto: tcp

        - name: Enable UFW
          ufw:
            state: enabled
            policy: deny

    # =======================================================================
    # COMPLETION MESSAGE
    # =======================================================================
    - name: Display completion message
      debug:
        msg:
          - "============================================"
          - "✅ Configuration Complete!"
          - "============================================"
          - "Next steps:"
          - "1. SSH into instance"
          - "2. cd {{ juice_shop_dir }}"
          - "3. ./deploy.sh"
          - "4. ./health-check.sh"
          - ""
          - "Aikido Dashboard: https://app.aikido.dev"
          - "Datadog Dashboard: https://app.{{ datadog_site }}/security/appsec"

  handlers:
    - name: Restart DataDog Agent
      systemd:
        name: datadog-agent
        state: restarted
