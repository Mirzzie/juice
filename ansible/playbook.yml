---
- name: Configure EC2 for Juice Shop with DevSecOps Tools (Docker-Based)
  hosts: juiceshop
  become: true
  gather_facts: true

  vars:
    juice_shop_dir: /opt/juice-shop
    node_version: "22"
    docker_compose_version: "2.23.0"

  vars_files:
    - secrets.yml

  tasks:
    # =======================================================================
    # SYSTEM PREPARATION
    # =======================================================================
    - name: Update APT cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required system packages
      apt:
        name:
          - curl
          - wget
          - git
          - unzip
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - jq
        state: present

    # =======================================================================
    # DOCKER INSTALLATION
    # =======================================================================
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    # =======================================================================
    # DATADOG AGENT INSTALLATION
    # =======================================================================
    - name: Check if DataDog agent is already installed
      stat:
        path: /etc/datadog-agent
      register: datadog_installed

    - name: Download DataDog installation script
      get_url:
        url: "https://install.datadoghq.com/scripts/install_script_agent7.sh"
        dest: /tmp/install_datadog.sh
        mode: '0755'
      when: not datadog_installed.stat.exists

    - name: Install DataDog Agent
      shell: >
        DD_API_KEY={{ datadog_api_key }} DD_SITE={{ datadog_site }} bash /tmp/install_datadog.sh
      args:
        creates: /etc/datadog-agent/datadog.yaml
      when: not datadog_installed.stat.exists
      register: datadog_install
      retries: 3
      delay: 15
      until: datadog_install.rc == 0

    - name: Configure DataDog Agent for APM and IAST
      blockinfile:
        path: /etc/datadog-agent/datadog.yaml
        block: |
          apm_config:
            enabled: true
            apm_non_local_traffic: true
            receiver_port: 8126
            receiver_timeout: 10
            max_traces_per_second: 100

          appsec_config:
            enabled: true

          runtime_security_config:
            enabled: true

          process_config:
            enabled: "true"
            scrub_args: true

          logs_enabled: true
          logs_config:
            container_collect_all: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK - DEVSECOPS CONFIG"
        create: no
        backup: yes
      notify: Restart DataDog Agent

    - name: Ensure DataDog Agent is running
      systemd:
        name: datadog-agent
        state: started
        enabled: yes

    # =======================================================================
    # APPLICATION SETUP
    # =======================================================================
    - name: Create application directory
      file:
        path: "{{ juice_shop_dir }}"
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    # ✅ FIXED: Minimal tracer.ts as per DataDog documentation
    - name: Create tracer.ts (DataDog tracer - MINIMAL VERSION)
      copy:
        dest: "{{ juice_shop_dir }}/tracer.ts"
        content: |
          // tracer.ts
          import tracer from "dd-trace";
          tracer.init(); // initialized in a different file to avoid hoisting.
          export default tracer;
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    # =======================================================================
    # DOCKERFILE WITH PROPER INSTRUMENTATION
    # =======================================================================
    - name: Create Dockerfile
      copy:
        dest: "{{ juice_shop_dir }}/Dockerfile"
        content: |
          # Multi-stage Dockerfile for Juice Shop with Security Tools
          FROM node:22-bookworm-slim AS builder

          RUN apt-get update && apt-get install -y git python3 make g++ && rm -rf /var/lib/apt/lists/*
          WORKDIR /juice-shop

          # Clone Juice Shop repository
          RUN git clone --depth 1 https://github.com/juice-shop/juice-shop.git . && rm -rf .git

          # Install dependencies including security tools
          RUN npm install --production && \
              npm install --save-exact @aikidosec/firewall && \
              npm install --save dd-trace

          # Copy tracer configuration
          COPY tracer.ts ./tracer.ts

          # ✅ CRITICAL: Modify server.ts to add security instrumentation
          RUN sed -i "1i import './tracer' // DataDog APM tracing" server.ts && \
              sed -i "2i require('@aikidosec/firewall') // Aikido Zen RASP" server.ts

          # Verify modifications
          RUN echo "=== Modified server.ts (first 5 lines) ===" && head -5 server.ts

          # --- Production stage ---
          FROM node:22-bookworm-slim
          RUN apt-get update && apt-get install -y curl procps && rm -rf /var/lib/apt/lists/*
          RUN groupadd -r juiceshop && useradd -r -g juiceshop juiceshop
          WORKDIR /juice-shop

          # Copy application with security modifications
          COPY --from=builder --chown=juiceshop:juiceshop /juice-shop /juice-shop

          # Ensure logs directory exists with correct permissions
          RUN mkdir -p /juice-shop/logs /juice-shop/ftp /juice-shop/data && \
              chown -R juiceshop:juiceshop /juice-shop

          USER juiceshop
          EXPOSE 3000

          HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
            CMD curl -f http://localhost:3000/rest/admin/application-version || exit 1

          ENV NODE_ENV=production \
              PORT=3000 \
              NODE_OPTIONS="--max-old-space-size=2048"
          
          # ✅ Start application with npm start (NOT app.ts)
          CMD ["npm", "start" "app.ts"]
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    # =======================================================================
    # DOCKER COMPOSE WITH ALL ENVIRONMENT VARIABLES
    # =======================================================================
    - name: Create docker-compose.yml
      copy:
        dest: "{{ juice_shop_dir }}/docker-compose.yml"
        content: |
          services:
            juice-shop:
              build: .
              image: juice-shop-secure:latest
              container_name: juice-shop
              restart: unless-stopped
              ports:
                - "3000:3000"
              env_file:
                - .env
              environment:
                # Node environment
                NODE_ENV: production
                
                # DataDog APM Configuration
                DD_ENV: dev
                DD_SERVICE: juice-shop
                DD_VERSION: latest
                DD_AGENT_HOST: 172.17.0.1
                DD_TRACE_AGENT_PORT: 8126
                
                # DataDog Tracing & Profiling
                DD_LOGS_INJECTION: "true"
                DD_TRACE_SAMPLE_RATE: "1"
                DD_PROFILING_ENABLED: "true"
                DD_RUNTIME_METRICS_ENABLED: "true"
                DD_DATA_STREAMS_ENABLED: "true"
                DD_TRACE_REMOVE_INTEGRATION_SERVICE_NAMES_ENABLED: "true"
                
                # DataDog Security (AppSec & IAST)
                DD_APPSEC_ENABLED: "true"
                DD_IAST_ENABLED: "true"
                
                # Aikido Configuration (from .env file)
                # AIKIDO_TOKEN: ${AIKIDO_TOKEN}
                # AIKIDO_BLOCK: ${AIKIDO_BLOCK}
                # AIKIDO_DEBUG: ${AIKIDO_DEBUG}
                
              extra_hosts:
                - "host.docker.internal:host-gateway"
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3000"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 60s
              logging:
                driver: "json-file"
                options:
                  max-size: "10m"
                  max-file: "3"
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Create .env file with secrets
      copy:
        dest: "{{ juice_shop_dir }}/.env"
        content: |
          # Aikido Zen RASP Configuration
          AIKIDO_TOKEN={{ aikido_token }}
          AIKIDO_BLOCK=false
          AIKIDO_DEBUG=true
          
          # DataDog Configuration (backup - also in docker-compose)
          DD_ENV=dev
          DD_VERSION=latest
        owner: ubuntu
        group: ubuntu
        mode: '0600'
      no_log: true

    # =======================================================================
    # DEPLOYMENT SCRIPTS
    # =======================================================================
    - name: Create deploy.sh
      copy:
        dest: "{{ juice_shop_dir }}/deploy.sh"
        content: |
          #!/bin/bash
          set -e
          cd "{{ juice_shop_dir }}"
          
          echo "🚀 Deploying Juice Shop with Security Instrumentation..."
          
          # Stop existing containers
          docker compose down || true
          
          # Remove old images
          docker rmi juice-shop-secure:latest 2>/dev/null || true
          
          # Build with no cache to ensure fresh instrumentation
          echo "📦 Building Docker image..."
          docker compose build --no-cache
          
          # Start containers
          echo "▶️  Starting containers..."
          docker compose up -d
          
          # Wait for container to be healthy
          echo "⏳ Waiting for application to start..."
          sleep 30
          
          # Verify deployment
          if docker ps | grep -q juice-shop; then
            echo "✅ Container is running"
            
            # Check instrumentation
            echo ""
            echo "🔍 Verifying Security Instrumentation:"
            echo "======================================"
            docker logs juice-shop 2>&1 | grep -i "DataDog" | head -3 || echo "⚠️  DataDog logs not found yet"
            docker logs juice-shop 2>&1 | grep -i "Aikido" | head -3 || echo "⚠️  Aikido logs not found yet"
            
            # Test application
            if curl -f -s http://localhost:3000 > /dev/null; then
              echo ""
              echo "✅ Application is accessible at http://localhost:3000"
              echo "✅ Deployment successful!"
            else
              echo "⚠️  Application not responding yet (may need more time)"
            fi
          else
            echo "❌ Deployment failed - container not running"
            docker compose logs
            exit 1
          fi
        mode: '0755'

    - name: Create verification script
      copy:
        dest: "{{ juice_shop_dir }}/verify-instrumentation.sh"
        content: |
          #!/bin/bash
          echo "🔍 Security Instrumentation Verification"
          echo "========================================"
          
          echo ""
          echo "📋 Container Status:"
          docker ps | grep juice-shop || echo "❌ Container not running"
          
          echo ""
          echo "📝 Server.ts modifications (first 10 lines):"
          docker exec juice-shop head -10 server.ts
          
          echo ""
          echo "📄 Tracer.ts content:"
          docker exec juice-shop cat tracer.ts
          
          echo ""
          echo "🔧 Environment Variables:"
          docker exec juice-shop env | grep -E "DD_|AIKIDO_" | sort
          
          echo ""
          echo "📊 Recent Logs:"
          docker logs juice-shop --tail=50 2>&1 | grep -i -E "datadog|aikido|tracer"
        mode: '0755'

  handlers:
    - name: Restart DataDog Agent
      systemd:
        name: datadog-agent
        state: restarted