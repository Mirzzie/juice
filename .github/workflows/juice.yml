name: DevSecOps-Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: "mirzzie/juice-shop"
  TAG: "latest"

jobs:
  # ---------- SAST ----------
  semgrep:
    name: SAST (Semgrep)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    container:
      image: semgrep/semgrep
    steps:
      - uses: actions/checkout@v4
      - run: semgrep ci

  # ---------- SBOM + SCA ----------
  sbom_and_build:
    name: SBOM + SCA (Trivy)
    runs-on: ubuntu-latest
    needs: semgrep
    steps:
      - uses: actions/checkout@v4
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          echo "$PWD/bin" >> $GITHUB_PATH
      - name: Trivy filesystem scan
        run: trivy fs --format json --output trivy-fs-report.json .
      - name: Upload Trivy reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: trivy-fs-report.json

  # ---------- Build & Push custom Docker image ----------
  build_and_push_image:
    name: Build & Push Juice Shop Docker Image
    runs-on: ubuntu-latest
    needs: sbom_and_build
    steps:
      - uses: actions/checkout@v4
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:$TAG .
      - name: Push Docker image
        run: docker push $IMAGE_NAME:$TAG

  # ---------- Deploy + DAST ----------
  deploy_and_security_tests:
    name: Deploy Juice Shop + DAST
    runs-on: ubuntu-latest
    needs: build_and_push_image
    steps:
      - uses: actions/checkout@v4

      # SSH Setup
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # Deploy container on EC2
      - name: Deploy Juice Shop on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            echo "[*] Cleaning up old containers..."
            docker rm -f juice-shop || true
            docker image prune -f
            echo "[*] Pulling latest image..."
            docker pull mirzzie/juice-shop:latest
            echo "[*] Running container..."
            docker run -d --name juice-shop \
              -p 3000:3000 \
              -e DD_API_KEY=${DD_API_KEY} \
              -e DD_ENV=staging \
              -e DD_SERVICE=juice-shop \
              -e DD_VERSION=latest \
              -e DD_IAST_ENABLED=true \
              -e DD_LOGS_INJECTION=true \
              -e NODE_OPTIONS="--require dd-trace/init" \
              mirzzie/juice-shop:latest

            echo "[*] Waiting for Juice Shop to be ready..."
            until curl -s http://localhost:3000 > /dev/null; do
              echo "Waiting for Juice Shop..."
              sleep 5
            done

            echo "[*] Deployment complete. Container status:"
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
          EOF

      # Run OWASP ZAP DAST scan
      - name: Run OWASP ZAP DAST Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: "http://${{ secrets.SSH_HOST }}:3000"
