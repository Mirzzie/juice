name: DevSecOps CI/CD Pipeline (Ansible + SAST/DAST)

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy-and-scan:
    runs-on: ubuntu-latest
    env:
      # optional default; if you prefer to override from vault or secrets
      DATADOG_SITE: "us5.datadoghq.com"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show repo root (debug)
        run: |
          echo "PWD: $(pwd)"
          ls -la

      - name: Verify playbook presence
        run: |
          test -f ansible/playbook.yml && echo "✅ playbook exists" || (echo "❌ ansible/playbook.yml missing" && exit 1)
          test -f ansible/secrets.yml && echo "✅ secrets.yml exists (encrypted)" || (echo "❌ ansible/secrets.yml missing" && exit 1)

      - name: Set up Python & pip
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip ssh-client
          pip3 --version

      - name: Install Ansible and Docker collection
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip sshpass
          pip3 install "ansible-core>=2.15" "cryptography"
          ansible-galaxy collection install community.docker
          ansible --version
          ansible-galaxy collection list

      - name: Create vault password file (temporary)
        run: |
          # write vault password from GitHub Secret to a file used by ansible
          mkdir -p ansible
          printf "%s\n" "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > ansible/vault_pass.txt
          chmod 600 ansible/vault_pass.txt

      - name: Prepare SSH key (preserve newlines) and known_hosts
        env:
          EC2_IP: ${{ secrets.EC2_INSTANCE_IP }}
        run: |
          mkdir -p ~/.ssh
          # Use printf to preserve multiline PEM formatting
          printf "%s\n" "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # ensure host key is present to avoid interactive prompt
          ssh-keyscan -H "$EC2_IP" >> ~/.ssh/known_hosts || true
          ls -la ~/.ssh

      - name: Run Ansible playbook (deploy)
        env:
          EC2_USER: ${{ secrets.EC2_SSH_USER }}
          EC2_IP: ${{ secrets.EC2_INSTANCE_IP }}
        run: |
          if [ -z "$EC2_USER" ]; then
            EC2_USER=ubuntu
          fi
          echo "Running playbook against $EC2_IP as $EC2_USER"
          # run ansible-playbook with inline single-host inventory (trailing comma) and vault password file
          ansible-playbook -i "${EC2_IP}," -u "$EC2_USER" \
            --private-key ~/.ssh/id_rsa \
            --vault-password-file ansible/vault_pass.txt \
            ansible/playbook.yml

      - name: Clean up sensitive files
        if: always()
        run: |
          shred -u ~/.ssh/id_rsa || rm -f ~/.ssh/id_rsa
          shred -u ansible/vault_pass.txt || rm -f ansible/vault_pass.txt
          echo "Cleaned temporary private key and vault password file."

      # === SECURITY SCANS ===

      - name: Run Semgrep SAST Scan
        uses: returntocorp/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
          publishDeployment: true
          config: "auto"

      - name: Run OWASP ZAP Baseline Scan (DAST)
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "http://${{ secrets.EC2_INSTANCE_IP }}:3000"
          # optional: fail_on_warning: true
