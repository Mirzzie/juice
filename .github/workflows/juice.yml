name: DevSecOps Security Tools Benchmark

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 2 * * 1" # Weekly on Monday at 2 AM
  workflow_dispatch:

env:
  JUICE_SHOP_VERSION: "latest"
  EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
  DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
  DATADOG_APP_KEY: ${{ secrets.DATADOG_APP_KEY }}
  DATADOG_SITE: "datadoghq.com"

jobs:
  # Stage 1: SAST with Semgrep
  sast-semgrep:
    name: SAST - Semgrep Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clone Juice Shop for Analysis
        run: |
          git clone https://github.com/juice-shop/juice-shop.git
          cd juice-shop
          echo "JUICE_SHOP_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Run Semgrep SAST
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/javascript
            p/typescript
          scanPath: juice-shop/
          generateSarif: true
        continue-on-error: true

      - name: Upload Semgrep Results
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep.sarif

      - name: Generate Semgrep Metrics
        run: |
          mkdir -p benchmark-results
          cat > benchmark-results/semgrep-metrics.json <<EOF
          {
            "tool": "Semgrep",
            "type": "SAST",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "scan_duration": "${{ steps.semgrep.outputs.duration }}",
            "commit": "${{ env.JUICE_SHOP_COMMIT }}"
          }
          EOF

      - name: Upload Benchmark Metrics
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-metrics
          path: benchmark-results/

  # Stage 2: Deploy Juice Shop to EC2 with Datadog Agent
  deploy-juice-shop:
    name: Deploy Juice Shop with Datadog IAST
    runs-on: ubuntu-latest
    needs: sast-semgrep

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Check EC2 Connectivity
        run: |
          echo "Testing SSH connectivity to EC2 instance..."
          ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 ubuntu@${{ env.EC2_INSTANCE_IP }} 'echo "SSH connection successful"'

          echo ""
          echo "⚠️  IMPORTANT: Ensure your EC2 Security Group allows:"
          echo "  - Port 22 (SSH) from GitHub Actions IP"
          echo "  - Port 3000 (Juice Shop) from 0.0.0.0/0"
          echo "  - Port 8126 (Datadog APM) from container network"

      - name: Create Dockerfile with Datadog Tracing
        run: |
          cat > Dockerfile.juice-shop-dd << 'EOF'
          FROM bkimminich/juice-shop:latest

          # Install dd-trace for Node.js APM and IAST
          USER root
          WORKDIR /juice-shop
          RUN npm install --no-save dd-trace@latest

          # Create a startup script that initializes dd-trace
          RUN echo '#!/bin/sh' > /start.sh && \
              echo 'node -r dd-trace/init app.js' >> /start.sh && \
              chmod +x /start.sh

          USER node
          CMD ["/start.sh"]
          EOF

      - name: Copy Dockerfile to EC2
        run: |
          scp -i ~/.ssh/id_rsa Dockerfile.juice-shop-dd ubuntu@${{ env.EC2_INSTANCE_IP }}:~/

      - name: Deploy Juice Shop with Datadog Agent
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_INSTANCE_IP }} << 'ENDSSH'
          set -e

          # Update system
          sudo apt-get update

          # Create swap space to prevent OOM during Datadog installation
          if [ ! -f /swapfile ]; then
            echo "Creating 2GB swap space..."
            sudo fallocate -l 2G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
          fi

          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker ubuntu
          fi

          # Install Datadog Agent as Docker container
          docker pull gcr.io/datadoghq/agent:latest

          # Stop existing Datadog agent container if running
          docker stop datadog-agent || true
          docker rm datadog-agent || true

          # Run Datadog Agent container
          docker run -d \
            --name datadog-agent \
            --cgroupns host \
            --pid host \
            -e DD_API_KEY=${{ secrets.DATADOG_API_KEY }} \
            -e DD_SITE=${{ env.DATADOG_SITE }} \
            -e DD_APM_ENABLED=true \
            -e DD_APM_NON_LOCAL_TRAFFIC=true \
            -e DD_IAST_ENABLED=true \
            -e DD_APPSEC_ENABLED=true \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            -v /proc/:/host/proc/:ro \
            -v /sys/fs/cgroup/:/host/sys/fs/cgroup:ro \
            -v /var/lib/docker/containers:/var/lib/docker/containers:ro \
            -p 8126:8126 \
            gcr.io/datadoghq/agent:latest

          # Wait for Datadog agent to be ready
          echo "Waiting for Datadog agent to start..."
          sleep 10

          # Stop existing Juice Shop container
          docker stop juice-shop || true
          docker rm juice-shop || true

          # Build custom Juice Shop image with dd-trace
          echo "Building Juice Shop with Datadog tracing support..."
          docker build -t juice-shop-dd:latest -f Dockerfile.juice-shop-dd .

          # Get Datadog Agent container IP
          DD_AGENT_HOST=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' datadog-agent)
          echo "Datadog Agent IP: $DD_AGENT_HOST"

          # Run Juice Shop with Datadog tracing
          docker run -d \
            --name juice-shop \
            -p 3000:3000 \
            -e DD_AGENT_HOST=$DD_AGENT_HOST \
            -e DD_TRACE_AGENT_PORT=8126 \
            -e DD_SERVICE=juice-shop \
            -e DD_ENV=benchmark \
            -e DD_VERSION=latest \
            -e DD_IAST_ENABLED=true \
            -e DD_APPSEC_ENABLED=true \
            -e DD_RUNTIME_METRICS_ENABLED=true \
            -e DD_TRACE_STARTUP_LOGS=true \
            juice-shop-dd:latest

          # Wait for Juice Shop to be healthy
          echo "Waiting for Juice Shop to start..."
          sleep 5

          for i in {1..60}; do
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "Juice Shop is running!"
              docker logs juice-shop --tail 20
              break
            fi
            
            if [ $i -eq 60 ]; then
              echo "Timeout waiting for Juice Shop. Container logs:"
              docker logs juice-shop
              docker ps -a
              exit 1
            fi
            
            echo "Attempt $i/60: Waiting for Juice Shop..."
            sleep 3
          done
          ENDSSH

      - name: Verify Deployment
        run: |
          echo "Waiting additional time for application startup..."
          sleep 15

          echo "Testing connection to Juice Shop..."
          for i in {1..10}; do
            if curl -f -m 10 http://${{ env.EC2_INSTANCE_IP }}:3000 > /dev/null 2>&1; then
              echo "✓ Juice Shop is accessible at http://${{ env.EC2_INSTANCE_IP }}:3000"
              exit 0
            fi
            echo "Attempt $i/10: Waiting for external access..."
            sleep 3
          done

          echo "Failed to connect to Juice Shop. Checking EC2 instance..."
          ssh -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_INSTANCE_IP }} << 'ENDSSH'
            echo "=== Docker container status ==="
            docker ps -a
            echo ""
            echo "=== Juice Shop logs ==="
            docker logs juice-shop --tail 50
            echo ""
            echo "=== Network connectivity ==="
            curl -v http://localhost:3000 || true
            echo ""
            echo "=== Listening ports ==="
            sudo netstat -tlnp | grep 3000 || ss -tlnp | grep 3000
          ENDSSH
          exit 1

      - name: Save Deployment Info
        run: |
          mkdir -p benchmark-results
          cat > benchmark-results/deployment-info.json <<EOF
          {
            "juice_shop_url": "http://${{ env.EC2_INSTANCE_IP }}:3000",
            "deployment_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "datadog_enabled": true
          }
          EOF

      - name: Upload Deployment Info
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info
          path: benchmark-results/

  # Stage 3: DAST with OWASP ZAP
  dast-owasp-zap:
    name: DAST - OWASP ZAP Analysis
    runs-on: ubuntu-latest
    needs: deploy-juice-shop

    steps:
      - name: Download Deployment Info
        uses: actions/download-artifact@v4
        with:
          name: deployment-info
          path: deployment-info/

      - name: Set Target URL
        run: |
          echo "TARGET_URL=http://${{ env.EC2_INSTANCE_IP }}:3000" >> $GITHUB_ENV

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: ${{ env.TARGET_URL }}
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a -j -l INFO"
          allow_issue_writing: false
        continue-on-error: true

      - name: OWASP ZAP Full Scan
        run: |
          docker run --rm \
            -v $(pwd):/zap/wrk:rw \
            -t ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py \
            -t ${{ env.TARGET_URL }} \
            -r zap-full-report.html \
            -J zap-full-report.json \
            -x zap-full-report.xml \
            -m 10 \
            -z "-config api.disablekey=true" || true
        continue-on-error: true

      - name: Generate ZAP Metrics
        run: |
          mkdir -p benchmark-results

          # Parse ZAP JSON report for metrics
          if [ -f zap-full-report.json ]; then
            HIGH_COUNT=$(jq '[.site[].alerts[] | select(.riskdesc | contains("High"))] | length' zap-full-report.json || echo 0)
            MEDIUM_COUNT=$(jq '[.site[].alerts[] | select(.riskdesc | contains("Medium"))] | length' zap-full-report.json || echo 0)
            LOW_COUNT=$(jq '[.site[].alerts[] | select(.riskdesc | contains("Low"))] | length' zap-full-report.json || echo 0)
          else
            HIGH_COUNT=0
            MEDIUM_COUNT=0
            LOW_COUNT=0
          fi

          cat > benchmark-results/zap-metrics.json <<EOF
          {
            "tool": "OWASP ZAP",
            "type": "DAST",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "target": "${{ env.TARGET_URL }}",
            "findings": {
              "high": $HIGH_COUNT,
              "medium": $MEDIUM_COUNT,
              "low": $LOW_COUNT
            }
          }
          EOF

      - name: Upload ZAP Results
        uses: actions/upload-artifact@v4
        with:
          name: zap-results
          path: |
            zap-full-report.html
            zap-full-report.json
            zap-full-report.xml
            benchmark-results/
        if: always()

  # Stage 4: IAST with Datadog Runtime Code Analysis
  iast-datadog:
    name: IAST - Datadog Runtime Analysis
    runs-on: ubuntu-latest
    needs: deploy-juice-shop

    steps:
      - name: Wait for IAST Instrumentation
        run: |
          echo "Waiting for Datadog IAST to collect runtime data..."
          sleep 120

      - name: Generate Traffic for IAST
        run: |
          TARGET="http://${{ env.EC2_INSTANCE_IP }}:3000"

          echo "Generating traffic to trigger IAST analysis..."

          # Basic crawl
          for endpoint in "/" "/rest/user/login" "/api/Feedbacks" "/api/Products" "/profile"; do
            curl -s "$TARGET$endpoint" > /dev/null || true
            sleep 1
          done

          # Simulate vulnerable operations
          # SQL Injection attempts
          curl -s "$TARGET/rest/products/search?q='))--" > /dev/null || true
          curl -s "$TARGET/rest/products/search?q=' OR '1'='1" > /dev/null || true

          # XSS attempts
          curl -s "$TARGET/rest/products/search?q=<script>alert(1)</script>" > /dev/null || true

          # Path traversal
          curl -s "$TARGET/ftp/../../etc/passwd" > /dev/null || true

          echo "Traffic generation complete"
          sleep 60

      - name: Query Datadog IAST Results via API
        run: |
          mkdir -p benchmark-results

          # Query Datadog for IAST vulnerabilities
          curl -X GET "https://api.${{ env.DATADOG_SITE }}/api/v2/security_monitoring/signals" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -H "DD-APPLICATION-KEY: ${{ secrets.DATADOG_APP_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "filter": {
                "query": "service:juice-shop env:benchmark",
                "from": "now-1h",
                "to": "now"
              }
            }' > benchmark-results/datadog-signals.json || echo '{}' > benchmark-results/datadog-signals.json

          # Query for Code Security vulnerabilities
          curl -X GET "https://api.${{ env.DATADOG_SITE }}/api/v2/code-security/vulnerabilities" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -H "DD-APPLICATION-KEY: ${{ secrets.DATADOG_APP_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "filter": {
                "service": "juice-shop",
                "env": "benchmark"
              }
            }' > benchmark-results/datadog-vulnerabilities.json || echo '{}' > benchmark-results/datadog-vulnerabilities.json

      - name: Generate Datadog IAST Metrics
        run: |
          cat > benchmark-results/datadog-iast-metrics.json <<EOF
          {
            "tool": "Datadog Code Security (IAST)",
            "type": "IAST",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "service": "juice-shop",
            "environment": "benchmark",
            "datadog_dashboard": "https://app.${{ env.DATADOG_SITE }}/security/code-security"
          }
          EOF

      - name: Upload Datadog IAST Results
        uses: actions/upload-artifact@v4
        with:
          name: datadog-iast-results
          path: benchmark-results/

  # Stage 5: Benchmark Report Generation
  generate-benchmark-report:
    name: Generate Benchmark Report
    runs-on: ubuntu-latest
    needs: [sast-semgrep, dast-owasp-zap, iast-datadog]
    if: always()

    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-results/

      - name: Consolidate Results
        run: |
          mkdir -p final-report

          # Combine all metrics
          cat > final-report/benchmark-summary.json <<EOF
          {
            "benchmark_run": {
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "workflow_run_id": "${{ github.run_id }}",
              "target_application": "OWASP Juice Shop"
            },
            "tools_evaluated": {
              "sast": "Semgrep",
              "dast": "OWASP ZAP",
              "iast": "Datadog Code Security"
            }
          }
          EOF

          # Copy all results
          find all-results -type f -name "*.json" -exec cp {} final-report/ \;
          find all-results -type f \( -name "*.html" -o -name "*.xml" -o -name "*.sarif" \) -exec cp {} final-report/ \;

      - name: Generate Markdown Report
        run: |
          cat > final-report/BENCHMARK_REPORT.md <<EOF
          # DevSecOps Security Tools Benchmark Report

          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Target Application:** OWASP Juice Shop
          **Workflow Run:** [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ## Tools Evaluated

          ### 1. SAST - Semgrep
          - **Type:** Static Application Security Testing
          - **Configuration:** OWASP Top 10, Security Audit, JavaScript/TypeScript rules
          - **Results:** See \`semgrep.sarif\` and \`semgrep-metrics.json\`

          ### 2. DAST - OWASP ZAP
          - **Type:** Dynamic Application Security Testing
          - **Scan Type:** Full scan with spider
          - **Results:** See \`zap-full-report.html\` and \`zap-metrics.json\`

          ### 3. IAST - Datadog Code Security
          - **Type:** Interactive Application Security Testing
          - **Configuration:** Runtime code analysis with APM instrumentation
          - **Results:** See \`datadog-vulnerabilities.json\` and Datadog dashboard

          ## Key Findings

          ### Semgrep (SAST)
          - Analyzes source code without execution
          - Identifies potential vulnerabilities in code patterns
          - Fast scanning with minimal false positives

          ### OWASP ZAP (DAST)
          - Tests running application from external perspective
          - Discovers runtime vulnerabilities and configuration issues
          - Provides attack simulation capabilities

          ### Datadog IAST
          - Monitors application during runtime
          - Detects vulnerabilities during actual code execution
          - Provides contextual information about exploitability

          ## Accessing Results

          - **Semgrep SARIF:** Upload to GitHub Security tab
          - **ZAP Reports:** Download HTML report for detailed findings
          - **Datadog Dashboard:** Visit https://app.${{ env.DATADOG_SITE }}/security/code-security

          ## Next Steps

          1. Review all findings across the three tools
          2. Prioritize vulnerabilities based on severity and exploitability
          3. Create remediation tickets for validated issues
          4. Update security policies based on benchmark insights

          EOF

      - name: Upload Final Benchmark Report
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-report
          path: final-report/

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## 🔐 Security Benchmark Complete\n\nThe DevSecOps pipeline has completed analyzing OWASP Juice Shop with:\n- ✅ Semgrep (SAST)\n- ✅ OWASP ZAP (DAST)\n- ✅ Datadog Code Security (IAST)\n\nDownload the artifacts to review detailed findings.'
            })

  # Cleanup Stage
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [generate-benchmark-report]
    if: always()

    steps:
      - name: Cleanup EC2 Instance (Optional)
        run: |
          echo "Juice Shop remains running for manual testing"
          echo "To stop: ssh ubuntu@${{ env.EC2_INSTANCE_IP }} 'docker stop juice-shop'"
