name: DevSecOps Pipeline - Docker-Based (Optimized)

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [dev]
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        type: choice
        options:
          - "deploy_application"
          - "run_security_scans"
          - "full_pipeline"
        default: "deploy_application"

env:
  EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
  DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
  DATADOG_SITE: "us5.datadoghq.com"
  AIKIDO_TOKEN: ${{ secrets.ZEN_FIREWALL_TOKEN }}
  SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
  SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

jobs:
  # =========================================================================
  # JOB 1: SAST - Semgrep
  # =========================================================================
  sast-semgrep:
    name: 🔍 SAST - Semgrep Scan
    runs-on: ubuntu-latest
    container: semgrep/semgrep
    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep Scan
        run: |
          semgrep scan --config=auto --json --output=semgrep-results.json || true
          semgrep scan --config=auto --sarif --output=semgrep-results.sarif || true
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: |
            semgrep-results.json
            semgrep-results.sarif

  # =========================================================================
  # JOB 2: Configure Instance (Ansible)
  # =========================================================================
  configure-instance:
    name: ⚙️ Configure EC2 Instance
    runs-on: ubuntu-latest
    needs: sast-semgrep
    steps:
      - uses: actions/checkout@v4

      - name: Setup Ansible
        run: |
          sudo apt-get update && sudo apt-get install -y ansible python3-boto3

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Create inventory
        run: |
          echo "[juiceshop]" > inventory.ini
          echo "${{ secrets.EC2_INSTANCE_IP }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory.ini

      - name: Run Playbook
        run: ansible-playbook -i inventory.ini ansible/playbook.yml -v

  # =========================================================================
  # JOB 3: Build & Deploy
  # =========================================================================
  build-and-deploy:
    name: 🚀 Build & Deploy
    runs-on: ubuntu-latest
    needs: configure-instance
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to EC2 via SSH
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_INSTANCE_IP }} << 'ENDSSH'
            cd /opt/juice-shop
            echo "=== Cleaning old test files ==="
            rm -rf test/
            echo "=== Building Docker containers ==="
            docker compose down || true
            docker compose build --no-cache
            docker compose up -d
            sleep 30
            curl -f http://localhost:3000 || (echo "App not responding!" && exit 1)
          ENDSSH

  # =========================================================================
  # JOB 4: DAST - OWASP ZAP
  # =========================================================================
  dast-owasp-zap:
    name: 🕷️ DAST - OWASP ZAP
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - uses: actions/checkout@v4
      - run: mkdir -p .zap
      - uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "http://${{ secrets.EC2_INSTANCE_IP }}:3000"
          cmd_options: "-a -j -m 5 -T 60"
          fail_action: false
      - uses: actions/upload-artifact@v4
        with:
          name: zap-results
          path: report_html.html

  # =========================================================================
  # JOB 5: Security Report
  # =========================================================================
  security-report:
    name: 📋 Security Summary
    runs-on: ubuntu-latest
    needs: [sast-semgrep, dast-owasp-zap]
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate Report
        run: |
          echo "# Security Pipeline Summary" > report.md
          echo "- Semgrep ✅" >> report.md
          echo "- OWASP ZAP ✅" >> report.md
          date >> report.md
      - uses: actions/upload-artifact@v4
        with:
          name: final-report
          path: report.md
