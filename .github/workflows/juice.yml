name: DevSecOps-Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: "bkimminich/juice-shop"
  TAG: "latest" # Using official image

jobs:
  # ---------- SAST ----------
  semgrep:
    name: SAST (Semgrep)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    container:
      image: semgrep/semgrep
    if: (github.actor != 'dependabot[bot]')
    steps:
      - uses: actions/checkout@v4
      - run: semgrep ci

  # ---------- SBOM + SCA ----------
  sbom_and_build:
    name: SBOM + SCA (Trivy)
    runs-on: ubuntu-latest
    needs: semgrep
    steps:
      - uses: actions/checkout@v4
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          echo "$PWD/bin" >> $GITHUB_PATH
      - name: Pull Juice Shop image
        run: docker pull $IMAGE_NAME:$TAG
      - name: Trivy filesystem scan
        run: trivy fs --format json --output trivy-fs-report.json .
      - name: Trivy image scan
        run: trivy image --format json --output trivy-image-report.json $IMAGE_NAME:$TAG || true
      - name: Upload Trivy reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-fs-report.json
            trivy-image-report.json

  # ---------- Deploy + IAST + DAST ----------
  deploy_and_security_tests:
    name: Deploy Juice Shop + IAST + DAST
    runs-on: ubuntu-latest
    needs: sbom_and_build
    steps:
      - uses: actions/checkout@v4

      # SSH Setup
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # Deploy Juice Shop with Datadog IAST
      - name: Deploy Juice Shop on staging EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
            set -e

            echo "[*] Cleaning up old containers..."
            docker rm -f juice-shop || true

            echo "[*] Cleaning up dangling images..."
            docker image prune -f

            echo "[*] Running Juice Shop with Datadog IAST enabled..."
            docker run -d --name juice-shop \
              -p 3000:3000 \
              -e DD_API_KEY=${{ secrets.DATADOG_API_KEY }} \
              -e DD_ENV=staging \
              -e DD_SERVICE=juice-shop \
              -e DD_VERSION=latest \
              -e DD_IAST_ENABLED=true \
              -e DD_LOGS_INJECTION=true \
              -e NODE_OPTIONS="--require dd-trace/init" \
              $IMAGE_NAME:$TAG

            echo "[*] Deployment complete. Container status:"
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
          EOF

      # Run OWASP ZAP DAST Scan
      - name: Run OWASP ZAP DAST Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: "http://${{ secrets.SSH_HOST }}:3000"
