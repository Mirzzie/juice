name: DevSecOps Security Tools Benchmark

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 2 * * 1"
  workflow_dispatch:

env:
  JUICE_SHOP_VERSION: "latest"
  EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
  DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
  DATADOG_APP_KEY: ${{ secrets.DATADOG_APP_KEY }}
  DATADOG_SITE: "datadoghq.com"

jobs:
  sast-semgrep:
    name: SAST - Semgrep Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clone Juice Shop for Analysis
        run: |
          git clone https://github.com/juice-shop/juice-shop.git
          cd juice-shop
          echo "JUICE_SHOP_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Run Semgrep SAST
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/javascript
            p/typescript
        continue-on-error: true

      - name: Upload Semgrep Results
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep.sarif

      - name: Generate Semgrep Metrics
        run: |
          mkdir -p benchmark-results
          cat > benchmark-results/semgrep-metrics.json <<'EOF'
          {
            "tool": "Semgrep",
            "type": "SAST",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ env.JUICE_SHOP_COMMIT }}"
          }
          EOF

      - name: Upload Benchmark Metrics
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-metrics
          path: benchmark-results/

  deploy-juice-shop:
    name: Deploy Juice Shop with Datadog IAST
    runs-on: ubuntu-latest
    needs: sast-semgrep

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Check EC2 Connectivity
        run: |
          echo "Testing SSH connectivity to EC2 instance..."
          ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 ubuntu@${{ env.EC2_INSTANCE_IP }} 'echo "SSH connection successful"'
          echo ""
          echo "IMPORTANT - Ensure your EC2 Security Group allows Port 22 and Port 3000"

      - name: Create Dockerfile with Datadog Tracing
        run: |
          cat > Dockerfile.juice-shop-dd <<'DOCKERFILE'
          FROM bkimminich/juice-shop:latest

          USER root
          WORKDIR /juice-shop

          RUN npm install --no-save dd-trace@5

          RUN printf '#!/usr/bin/env node\nrequire("dd-trace/init");\nrequire("./build/app");\n' > /juice-shop/server-dd.js && \
              chmod +x /juice-shop/server-dd.js

          USER node
          ENTRYPOINT ["node"]
          CMD ["/juice-shop/server-dd.js"]
          DOCKERFILE

      - name: Copy Dockerfile to EC2
        run: |
          scp -i ~/.ssh/id_rsa Dockerfile.juice-shop-dd ubuntu@${{ env.EC2_INSTANCE_IP }}:~/

      - name: Deploy Juice Shop with Datadog Agent
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_SITE: ${{ env.DATADOG_SITE }}
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_INSTANCE_IP }} "DD_API_KEY=${DD_API_KEY} DD_SITE=${DD_SITE}" 'bash -s' <<'ENDSSH'
          set -e

          sudo apt-get update -qq
          docker system prune -af --volumes || true

          echo "Disk space:"
          df -h

          if [ ! -f /swapfile ]; then
            echo "Creating swap..."
            sudo fallocate -l 2G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
          fi

          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker ubuntu
          fi

          if sudo systemctl is-active --quiet datadog-agent; then
            echo "Datadog Agent is already running - skipping installation"
            sudo systemctl status datadog-agent --no-pager
          elif command -v datadog-agent &> /dev/null; then
            echo "Datadog Agent is installed but not running - starting it"
            sudo systemctl start datadog-agent
            sleep 5
            sudo systemctl status datadog-agent --no-pager
          else
            echo "Installing Datadog Agent via installation script..."
            
            DD_API_KEY=${DD_API_KEY} \
            DD_SITE=${DD_SITE} \
            DD_APM_ENABLED=true \
            DD_APM_NON_LOCAL_TRAFFIC=true \
            DD_IAST_ENABLED=true \
            DD_APPSEC_ENABLED=true \
            bash -c "$(curl -L https://s3.amazonaws.com/dd-agent/scripts/install_script_agent7.sh)"
            
            sudo tee /etc/datadog-agent/conf.d/apm.yaml > /dev/null <<APMCONF
          apm_config:
            enabled: true
            apm_non_local_traffic: true
          iast:
            enabled: true
          appsec:
            enabled: true
          APMCONF
            
            sudo systemctl restart datadog-agent
            sleep 10
            echo "Datadog Agent installed and started"
          fi

          if sudo systemctl is-active --quiet datadog-agent; then
            echo "Datadog Agent is running successfully"
          else
            echo "Warning: Datadog Agent failed to start"
            sudo journalctl -u datadog-agent -n 50 --no-pager
          fi

          docker stop juice-shop 2>/dev/null || true
          docker rm juice-shop 2>/dev/null || true

          if ! docker images --format '{{.Repository}}:{{.Tag}}' | grep -q 'juice-shop-dd:latest'; then
            if ! docker images --format '{{.Repository}}:{{.Tag}}' | grep -q 'bkimminich/juice-shop:latest'; then
              docker pull bkimminich/juice-shop:latest
            fi
            docker build -t juice-shop-dd:latest -f Dockerfile.juice-shop-dd .
          fi

          DD_AGENT_HOST=$(hostname -I | awk '{print $1}')
          echo "Using host IP for Datadog Agent: ${DD_AGENT_HOST}"
            --name juice-shop \
            -p 3000:3000 \
            -e DD_AGENT_HOST=${DD_AGENT_HOST} \
            -e DD_TRACE_AGENT_PORT=8126 \
            -e DD_SERVICE=juice-shop \
            -e DD_ENV=benchmark \
            -e DD_VERSION=latest \
            -e DD_IAST_ENABLED=true \
            -e DD_APPSEC_ENABLED=true \
            -e DD_RUNTIME_METRICS_ENABLED=true \
            juice-shop-dd:latest

          echo "Waiting for Juice Shop..."
          for i in {1..60}; do
            if curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "Juice Shop is running"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "Timeout"
              docker logs juice-shop
              exit 1
            fi
            sleep 3
          done
          ENDSSH

      - name: Verify Deployment
        run: |
          sleep 15
          for i in {1..10}; do
            if curl -f -m 10 http://${{ env.EC2_INSTANCE_IP }}:3000 >/dev/null 2>&1; then
              echo "Juice Shop accessible"
              exit 0
            fi
            sleep 3
          done
          echo "Connection failed"
          exit 1

      - name: Save Deployment Info
        run: |
          mkdir -p benchmark-results
          cat > benchmark-results/deployment-info.json <<'EOF'
          {
            "juice_shop_url": "http://${{ env.EC2_INSTANCE_IP }}:3000",
            "deployment_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "datadog_enabled": true
          }
          EOF

      - name: Upload Deployment Info
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info
          path: benchmark-results/

  dast-owasp-zap:
    name: DAST - OWASP ZAP Analysis
    runs-on: ubuntu-latest
    needs: deploy-juice-shop

    steps:
      - name: Set Target URL
        run: echo "TARGET_URL=http://${{ env.EC2_INSTANCE_IP }}:3000" >> $GITHUB_ENV

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: ${{ env.TARGET_URL }}
          cmd_options: "-a -j -l INFO"
        continue-on-error: true

      - name: OWASP ZAP Full Scan
        run: |
          docker run --rm -v $(pwd):/zap/wrk:rw -t ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py -t ${{ env.TARGET_URL }} \
            -r zap-full-report.html -J zap-full-report.json \
            -m 10 -z "-config api.disablekey=true" || true
        continue-on-error: true

      - name: Generate ZAP Metrics
        run: |
          mkdir -p benchmark-results
          HIGH=0; MEDIUM=0; LOW=0
          if [ -f zap-full-report.json ]; then
            HIGH=$(jq '[.site[].alerts[]|select(.riskdesc|contains("High"))]|length' zap-full-report.json 2>/dev/null || echo 0)
            MEDIUM=$(jq '[.site[].alerts[]|select(.riskdesc|contains("Medium"))]|length' zap-full-report.json 2>/dev/null || echo 0)
            LOW=$(jq '[.site[].alerts[]|select(.riskdesc|contains("Low"))]|length' zap-full-report.json 2>/dev/null || echo 0)
          fi
          cat > benchmark-results/zap-metrics.json <<EOF
          {"tool":"OWASP ZAP","type":"DAST","findings":{"high":${HIGH},"medium":${MEDIUM},"low":${LOW}}}
          EOF

      - name: Upload ZAP Results
        uses: actions/upload-artifact@v4
        with:
          name: zap-results
          path: |
            zap-*.html
            zap-*.json
            benchmark-results/
        if: always()

  iast-datadog:
    name: IAST - Datadog Runtime Analysis
    runs-on: ubuntu-latest
    needs: deploy-juice-shop

    steps:
      - name: Generate Traffic for IAST
        run: |
          TARGET="http://${{ env.EC2_INSTANCE_IP }}:3000"
          sleep 60
          for endpoint in / /rest/user/login /api/Products; do
            curl -s "${TARGET}${endpoint}" >/dev/null || true
            sleep 1
          done
          curl -s "${TARGET}/rest/products/search?q='))--" >/dev/null || true
          sleep 60

      - name: Query Datadog IAST Results
        run: |
          mkdir -p benchmark-results
          echo '{"tool":"Datadog IAST","type":"IAST"}' > benchmark-results/datadog-metrics.json

      - name: Upload Datadog Results
        uses: actions/upload-artifact@v4
        with:
          name: datadog-iast-results
          path: benchmark-results/

  generate-report:
    name: Generate Benchmark Report
    runs-on: ubuntu-latest
    needs: [sast-semgrep, dast-owasp-zap, iast-datadog]
    if: always()

    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-results/

      - name: Consolidate Results
        run: |
          mkdir -p final-report
          find all-results -name "*.json" -exec cp {} final-report/ \;
          find all-results -name "*.html" -exec cp {} final-report/ \;
          find all-results -name "*.sarif" -exec cp {} final-report/ \;

      - name: Upload Final Report
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-report
          path: final-report/

  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [generate-report]
    if: always()

    steps:
      - name: Info
        run: |
          echo "Juice Shop remains running on EC2"
          echo "To stop run docker stop juice-shop on the EC2 instance"
