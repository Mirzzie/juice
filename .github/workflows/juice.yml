name: Juice Shop DevSecOps Benchmark Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
  DATADOG_SITE: "us5.datadoghq.com"

jobs:
  # ------------------------------
  # 1️⃣  Static Application Security Testing
  # ------------------------------
  sast-semgrep:
    name: SAST - Semgrep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Semgrep Analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: "p/owasp-top-ten"

      - name: Upload Semgrep Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep.sarif

  # ------------------------------
  # 2️⃣  Deploy Juice Shop with Datadog & Zen Firewall
  # ------------------------------
  deploy-juice-shop:
    name: Deploy Juice Shop with Datadog & Zen Firewall
    runs-on: ubuntu-latest
    needs: sast-semgrep

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Check EC2 Connectivity
        run: |
          ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 ubuntu@${{ env.EC2_INSTANCE_IP }} 'echo "SSH OK"'

      - name: Deploy Juice Shop with Datadog & Aikido Zen Firewall
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_APP_KEY: ${{ secrets.DATADOG_APP_KEY }}
          DD_SITE: ${{ env.DATADOG_SITE }}
          AIKIDO_TOKEN: ${{ secrets.AIKIDO_TOKEN }}
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_INSTANCE_IP }} 'bash -s' <<'ENDSSH'
          set -e

          echo "=== System Prep ==="
          sudo apt-get update -qq
          sudo apt-get install -y curl jq git docker.io || true
          sudo systemctl enable docker
          sudo systemctl start docker

          echo "=== Install Datadog Agent ==="
          if ! command -v datadog-agent &>/dev/null; then
            DD_API_KEY="${DD_API_KEY}" \
            DD_SITE="${DD_SITE}" \
            bash -c "$(curl -L https://install.datadoghq.com/scripts/install_script_agent7.sh)"
          fi
          sudo systemctl restart datadog-agent

          echo "=== Juice Shop Setup ==="
          rm -rf juice-shop || true
          git clone https://github.com/juice-shop/juice-shop.git
          cd juice-shop

          echo "=== Inject Zen Firewall (Aikido) ==="
          printf "%s\n" \
          "FROM node:18-alpine" \
          "WORKDIR /juice-shop" \
          "COPY . ." \
          "RUN npm install --save-exact @aikidosec/firewall" \
          "RUN npm install" \
          "RUN npm run build" \
          "EXPOSE 3000" \
          "ENV AIKIDO_TOKEN=\${AIKIDO_TOKEN}" \
          "ENV AIKIDO_BLOCK=false" \
          "CMD [\"npm\", \"start\"]" > Dockerfile

          echo "=== Build & Run Juice Shop ==="
          docker stop juice-shop || true
          docker rm juice-shop || true
          docker build -t juice-shop-zen .
          docker run -d \
            --name juice-shop \
            -p 3000:3000 \
            -e AIKIDO_TOKEN="${AIKIDO_TOKEN}" \
            -e AIKIDO_BLOCK=false \
            -e DD_AGENT_HOST=$(hostname -I | awk '{print $1}') \
            -e DD_SERVICE=juice-shop \
            -e DD_ENV=benchmark \
            -e DD_VERSION=latest \
            juice-shop-zen

          echo "=== Wait for Startup ==="
          for i in {1..60}; do
            if curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "Juice Shop is running"
              exit 0
            fi
            sleep 3
          done
          echo "Juice Shop failed to start" >&2
          exit 1
          ENDSSH

  # ------------------------------
  # 3️⃣  Dynamic Application Security Testing (OWASP ZAP)
  # ------------------------------
  dast-zap:
    name: DAST - OWASP ZAP Scan
    runs-on: ubuntu-latest
    needs: deploy-juice-shop
    steps:
      - name: Run OWASP ZAP Baseline Scan
        run: |
          docker run --rm -v $(pwd):/zap/wrk:rw ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t http://${{ env.EC2_INSTANCE_IP }}:3000 \
            -r zap_report.html

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html

  # ------------------------------
  # 4️⃣  Cleanup EC2
  # ------------------------------
  cleanup:
    name: Cleanup EC2 Environment
    runs-on: ubuntu-latest
    if: always()
    needs: dast-zap
    steps:
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Stop and Remove Containers
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_INSTANCE_IP }} 'bash -s' <<'ENDSSH'
          set -e
          echo "=== Cleaning up Containers ==="
          docker stop juice-shop || true
          docker rm juice-shop || true
          docker image prune -af || true
          echo "Cleanup complete ✅"
          ENDSSH
