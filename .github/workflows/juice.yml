name: DevSecOps-Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: "mirzzie/my-juice-shop-ddtrace" # Your custom image name with dd-trace installed
  TAG: "latest"
  PORT: 3000

jobs:
  # ----------------- SAST -----------------
  semgrep:
    name: SAST (Semgrep)
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep
    if: github.actor != 'dependabot[bot]'
    steps:
      - uses: actions/checkout@v4
      - run: semgrep ci

  # ----------------- SBOM + SCA -----------------
  sbom_and_build:
    name: SBOM + SCA (Trivy)
    runs-on: ubuntu-latest
    needs: semgrep
    steps:
      - uses: actions/checkout@v4
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          echo "$PWD/bin" >> $GITHUB_PATH
      - name: Pull custom Juice Shop image
        run: docker pull ${{ env.IMAGE_NAME }}:${{ env.TAG }}
      - name: Trivy filesystem scan
        run: trivy fs --format json --output trivy-fs-report.json .
      - name: Trivy image scan
        run: trivy image --format json --output trivy-image-report.json ${{ env.IMAGE_NAME }}:${{ env.TAG }} || true
      - name: Upload Trivy reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-fs-report.json
            trivy-image-report.json

  # ----------------- Deploy + IAST + DAST -----------------
  deploy_and_security_tests:
    name: Deploy Juice Shop + IAST + DAST
    runs-on: ubuntu-latest
    needs: sbom_and_build
    steps:
      - uses: actions/checkout@v4

      # --- DockerHub login ---
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- SSH Setup ---
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # --- Deploy custom Juice Shop with Datadog IAST ---
      - name: Deploy Juice Shop with Datadog IAST
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e

            echo "[*] Removing old container if exists..."
            docker rm -f juice-shop || true

            echo "[*] Pulling latest custom Juice Shop image..."
            docker pull ${{ env.IMAGE_NAME }}:${{ env.TAG }}

            echo "[*] Running Juice Shop with Datadog IAST..."
            docker run -d --name juice-shop \
              -p 3000:3000 \
              -e DD_API_KEY=${DATADOG_API_KEY} \
              -e DD_ENV=staging \
              -e DD_SERVICE=juice-shop \
              -e DD_VERSION=latest \
              -e DD_IAST_ENABLED=true \
              -e DD_LOGS_INJECTION=true \
              -e NODE_OPTIONS="--require dd-trace/init" \
              ${{ env.IMAGE_NAME }}:${{ env.TAG }}

            until curl -s http://localhost:3000 > /dev/null; do
              echo "Waiting for Juice Shop to start..."
              sleep 5
            done

            echo "[*] Deployment completed, container status:"
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
          EOF

      # --- Run OWASP ZAP DAST Scan ---
      - name: Run OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: "http://${{ secrets.SSH_HOST }}:3000"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"

      # --- Report IAST scan completion to Datadog ---
      - name: Report IAST scan completion
        run: |
          echo "[*] Reporting IAST scan completion to Datadog..."
          curl -X POST "https://api.datadoghq.com/api/v2/appsec/scans" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "service": "juice-shop",
              "env": "staging",
              "version": "latest",
              "status": "completed"
            }'
