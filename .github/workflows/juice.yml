name: DevSecOps Security Benchmark

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  JUICE_SHOP_REPO: "https://github.com/juice-shop/juice-shop.git"
  EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
  DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
  DATADOG_APP_KEY: ${{ secrets.DATADOG_APP_KEY }}
  DATADOG_SITE: "datadoghq.com"
  ZEN_TOKEN: ${{ secrets.ZEN_TOKEN }}

jobs:
  sast-semgrep:
    name: SAST - Semgrep Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Semgrep Scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/javascript
            p/typescript
        continue-on-error: true

  build-zen-image:
    name: Build Juice Shop + Zen Firewall Image
    runs-on: ubuntu-latest
    needs: sast-semgrep

    steps:
      - name: Clone Juice Shop
        run: |
          git clone ${{ env.JUICE_SHOP_REPO }} juice-shop
          cd juice-shop
          echo "✅ Juice Shop cloned."

      - name: Inject Zen Firewall into app.ts
        run: |
          cd juice-shop
          # Insert import at the top of app.ts
          sed -i "1iimport '@aikidosec/firewall';" app.ts

      - name: Create Zen Dockerfile
        run: |
          cd juice-shop
          cat > Dockerfile <<'EOF'
          FROM node:18-alpine
          WORKDIR /juice-shop
          COPY . .
          RUN npm install --save-exact @aikidosec/firewall && npm ci
          RUN npm run build
          EXPOSE 3000
          ENV AIKIDO_BLOCK=false
          CMD ["npm", "start"]
          EOF

      - name: Build Zen RASP Image
        run: |
          cd juice-shop
          docker build -t juice-shop-zen:latest .
          docker save juice-shop-zen:latest -o juice-shop-zen.tar

      - name: Upload Zen Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: juice-shop-zen-image
          path: juice-shop/juice-shop-zen.tar

  deploy-juice-shop:
    name: Deploy Juice Shop + Zen RASP to EC2
    runs-on: ubuntu-latest
    needs: build-zen-image

    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Download Zen Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: juice-shop-zen-image
          path: .

      - name: Copy Image to EC2
        run: |
          scp -i ~/.ssh/id_rsa juice-shop-zen.tar ubuntu@${{ env.EC2_INSTANCE_IP }}:/home/ubuntu/

      - name: Deploy Containers
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_INSTANCE_IP }} 'bash -s' <<'ENDSSH'
          set -e
          echo "=== Cleaning old containers ==="
          docker stop juice-shop juice-shop-zen 2>/dev/null || true
          docker rm juice-shop juice-shop-zen 2>/dev/null || true

          echo "=== Pulling vanilla Juice Shop ==="
          docker pull bkimminich/juice-shop:latest

          echo "=== Loading Zen RASP image ==="
          docker load -i juice-shop-zen.tar

          echo "=== Running Juice Shop (Datadog IAST) on port 3000 ==="
          docker run -d \
            --name juice-shop \
            -p 3000:3000 \
            -e DD_AGENT_HOST=$(hostname -I | awk '{print $1}') \
            -e DD_SERVICE=juice-shop \
            bkimminich/juice-shop:latest

          echo "=== Running Juice Shop + Zen Firewall on port 4000 ==="
          docker run -d \
            --name juice-shop-zen \
            -p 4000:3000 \
            -e AIKIDO_TOKEN=${ZEN_TOKEN} \
            -e AIKIDO_BLOCK=false \
            juice-shop-zen:latest

          sleep 15
          docker ps
          ENDSSH

      - name: Verify Deployment
        run: |
          sleep 10
          curl -f http://${{ env.EC2_INSTANCE_IP }}:3000 >/dev/null && echo "✅ Juice Shop OK"
          curl -f http://${{ env.EC2_INSTANCE_IP }}:4000 >/dev/null && echo "✅ Zen RASP OK"

  dast-owasp-zap:
    name: DAST - OWASP ZAP Scan
    runs-on: ubuntu-latest
    needs: deploy-juice-shop

    steps:
      - name: Run OWASP ZAP
        run: |
          docker run --rm -v $(pwd):/zap/wrk:rw -t ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py -t http://${{ env.EC2_INSTANCE_IP }}:3000 \
            -r zap-report.html -J zap-report.json || true

      - name: Upload ZAP Results
        uses: actions/upload-artifact@v4
        with:
          name: zap-results
          path: |
            zap-report.html
            zap-report.json

  iast-datadog:
    name: IAST - Datadog Runtime Analysis
    runs-on: ubuntu-latest
    needs: deploy-juice-shop

    steps:
      - name: Simulate Traffic
        run: |
          TARGET="http://${{ env.EC2_INSTANCE_IP }}:3000"
          for endpoint in / /rest/products /rest/user/login /api/Feedbacks; do
            curl -s "${TARGET}${endpoint}" >/dev/null || true
            sleep 1
          done

      - name: Save Metrics
        run: |
          echo '{"tool":"Datadog IAST","status":"active"}' > datadog-results.json
          mkdir -p results && mv datadog-results.json results/

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: datadog-iast-results
          path: results/

  generate-report:
    name: Generate Final Report
    runs-on: ubuntu-latest
    needs: [sast-semgrep, dast-owasp-zap, iast-datadog]
    if: always()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: results/

      - name: Consolidate Summary
        run: |
          mkdir -p final-report
          echo "# DevSecOps Benchmark Summary" > final-report/summary.md
          echo "- SAST: Semgrep ✅" >> final-report/summary.md
          echo "- DAST: OWASP ZAP ✅" >> final-report/summary.md
          echo "- IAST: Datadog ✅" >> final-report/summary.md
          echo "- RASP: Zen Firewall (AikidoSec) ✅" >> final-report/summary.md
          echo "Generated: $(date -u)" >> final-report/summary.md

      - name: Upload Final Report
        uses: actions/upload-artifact@v4
        with:
          name: final-report
          path: final-report/
