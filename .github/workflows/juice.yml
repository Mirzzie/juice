name: DevSecOps Pipeline - Deploy & Security Scans

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:
    inputs:
      skip_ansible:
        description: "Skip Ansible configuration (if already configured)"
        required: false
        type: boolean
        default: true
      run_full_security_scan:
        description: "Run full security scan (including DAST)"
        required: false
        type: boolean
        default: true

env:
  EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
  SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
  EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
  ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}

jobs:
  # =========================================================================
  # JOB 1: SAST - Semgrep
  # =========================================================================
  sast-semgrep:
    name: üîç SAST - Semgrep Security Scan
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Semgrep Scan
        run: |
          semgrep scan --config=auto --json --output=semgrep-results.json || true
          semgrep scan --config=auto --sarif --output=semgrep-results.sarif || true
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload to Semgrep Dashboard
        if: always()
        run: semgrep ci
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

      - name: Upload SARIF to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep
        continue-on-error: true

      - name: Upload Semgrep Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: |
            semgrep-results.json
            semgrep-results.sarif

  # =========================================================================
  # JOB 2: Check Prerequisites
  # =========================================================================
  check-prerequisites:
    name: ‚úÖ Verify Prerequisites
    runs-on: ubuntu-latest
    needs: sast-semgrep
    outputs:
      can_proceed: ${{ steps.check.outputs.can_proceed }}
    steps:
      - name: Check Required Secrets
        id: check
        run: |
          echo "Checking required secrets..."
          MISSING_SECRETS=()
          if [ -z "${{ secrets.EC2_INSTANCE_IP }}" ]; then
            MISSING_SECRETS+=("EC2_INSTANCE_IP")
          fi
          if [ -z "${{ secrets.EC2_SSH_PRIVATE_KEY }}" ]; then
            MISSING_SECRETS+=("EC2_SSH_PRIVATE_KEY")
          fi
          if [ -z "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" ]; then
            MISSING_SECRETS+=("ANSIBLE_VAULT_PASSWORD")
          fi
          if [ ${#MISSING_SECRETS[@]} -ne 0 ]; then
            echo "::error::Missing required secrets: ${MISSING_SECRETS[*]}"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "‚úÖ All required secrets are set"
          echo "Target instance: ${{ secrets.EC2_INSTANCE_IP }}"
          echo "can_proceed=true" >> $GITHUB_OUTPUT

  # =========================================================================
  # JOB 3: Configure Instance (Optional)
  # =========================================================================
  configure-instance:
    name: ‚öôÔ∏è Configure Instance with Ansible
    runs-on: ubuntu-latest
    needs: check-prerequisites
    if: |
      needs.check-prerequisites.outputs.can_proceed == 'true' &&
      (github.event.inputs.skip_ansible == 'false' || github.event.inputs.skip_ansible == '')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Ansible
        run: |
          pip install ansible boto3 botocore

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Wait for SSH Availability
        run: |
          echo "Testing SSH connection to ${{ env.EC2_INSTANCE_IP }}..."
          for i in {1..30}; do
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 \
               -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_INSTANCE_IP }} \
               "echo 'SSH ready'" 2>/dev/null; then
              echo "‚úÖ SSH connection successful"
              exit 0
            fi
            echo "Attempt $i/30: Waiting for SSH..."
            sleep 10
          done
          echo "::error::SSH connection timeout"
          exit 1

      - name: Create Ansible Inventory
        run: |
          mkdir -p ansible
          cat > ansible/inventory.ini <<EOF
          [juiceshop]
          ${{ env.EC2_INSTANCE_IP }} ansible_user=ubuntu ansible_EC2_ssh_private_key_file=~/.ssh/id_rsa ansible_ssh_common_args='-o StrictHostKeyChecking=no'
          EOF

      - name: Create Vault Password File
        run: |
          cd ansible
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > .vault_pass
          chmod 600 .vault_pass

      - name: Run Ansible Playbook
        run: |
          cd ansible
          ansible-playbook -i inventory.ini playbook.yml \
            --vault-password-file .vault_pass -v

      - name: Clean Up Vault Password
        if: always()
        run: rm -f ansible/.vault_pass

      - name: Verify Configuration
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            ubuntu@${{ env.EC2_INSTANCE_IP }} << 'ENDSSH'
            echo "=== Configuration Verification ==="
            docker --version
            docker compose version
            sudo datadog-agent status | head -20 || true
            ls -la /opt/juice-shop/
          ENDSSH

  # =========================================================================
  # JOB 4: Build and Deploy Application
  # =========================================================================
  build-and-deploy:
    name: üöÄ Build & Deploy Application
    runs-on: ubuntu-latest
    needs: [check-prerequisites, configure-instance]
    if: |
      always() &&
      needs.check-prerequisites.outputs.can_proceed == 'true' &&
      (needs.configure-instance.result == 'success' || needs.configure-instance.result == 'skipped')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Check Instance Readiness
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_INSTANCE_IP }} << 'ENDSSH'
            if ! command -v docker &> /dev/null; then
              echo "::error::Docker not installed. Run Ansible configuration first."
              exit 1
            fi
            if [ ! -d "/opt/juice-shop" ]; then
              echo "::error::Application directory not found. Run Ansible configuration first."
              exit 1
            fi
            if [ ! -f "/opt/juice-shop/.env" ]; then
              echo "::error::.env file not found. Run Ansible configuration first."
              exit 1
            fi
            echo "‚úÖ Instance is ready for deployment"
          ENDSSH

      - name: Deploy Application
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_INSTANCE_IP }} << 'ENDSSH'
            set -e
            cd /opt/juice-shop
            docker compose down 2>/dev/null || true
            docker image prune -f 2>/dev/null || true
            docker compose build --no-cache
            docker compose up -d
            sleep 45
            if docker ps | grep -q juice-shop; then
              echo "‚úÖ Container is running"
            else
              echo "‚ùå Container failed to start"
              docker compose logs
              exit 1
            fi
            for i in {1..10}; do
              if curl -f -s http://localhost:3000 > /dev/null; then
                echo "‚úÖ Application is responding"
                break
              fi
              if [ $i -eq 10 ]; then
                echo "‚ùå Application not responding"
                exit 1
              fi
              sleep 5
            done
            docker compose logs --tail=30
          ENDSSH

      - name: Verify Security Tools
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_INSTANCE_IP }} << 'ENDSSH'
            echo "=== Security Tools Verification ==="
            docker logs juice-shop 2>&1 | grep -i aikido | head -5 || echo "‚ö†Ô∏è Aikido logs not found"
            docker logs juice-shop 2>&1 | grep -i datadog | head -5 || echo "‚ö†Ô∏è DataDog logs not found"
            sudo datadog-agent status | grep -A 3 "Agent (.*running)" || echo "‚ö†Ô∏è DataDog agent not running"
          ENDSSH

      - name: Generate Deployment Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## üöÄ Deployment Summary
          **Instance IP:** \`${{ env.EC2_INSTANCE_IP }}\`
          **Application URL:** http://${{ env.EC2_INSTANCE_IP }}:3000
          **Deployment Status:** ‚úÖ Success
          ### Security Tools Active:
          - ‚úÖ **SAST**: Semgrep
          - ‚úÖ **RASP**: Aikido Zen
          - ‚úÖ **IAST**: DataDog Runtime Analysis
          - ‚è≥ **DAST**: OWASP ZAP
          ### Security Dashboards:
          - [Semgrep Findings](https://semgrep.dev/orgs/-/findings)
          - [Aikido Dashboard](https://app.aikido.dev)
          - [DataDog IAST](https://app.us5.datadoghq.com/security/appsec?service=juice-shop)
          ### Next Steps:
          1. Access application: http://${{ env.EC2_INSTANCE_IP }}:3000
          2. Monitor security dashboards
          3. Review DAST scan results after completion
          EOF

  # =========================================================================
  # JOB 5: DAST - OWASP ZAP
  # =========================================================================
  dast-owasp-zap:
    name: üï∑Ô∏è DAST - OWASP ZAP Security Scan
    runs-on: ubuntu-latest
    needs: [check-prerequisites, build-and-deploy]
    if: |
      always() &&
      needs.build-and-deploy.result == 'success' &&
      github.event_name != 'pull_request' &&
      (github.event.inputs.run_full_security_scan == 'true' || github.event.inputs.run_full_security_scan == '')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Wait for Application Stability
        run: |
          echo "Waiting 30 seconds for application to stabilize..."
          sleep 30

      - name: Retry Application Accessibility
        run: |
          for i in {1..5}; do
            if curl -f -s http://${{ env.EC2_INSTANCE_IP }}:3000 > /dev/null; then
              echo "‚úÖ Application accessible for DAST scan"
              exit 0
            fi
            echo "Waiting for application... ($i/5)"
            sleep 10
          done
          echo "::warning::Application not accessible, skipping DAST scan"
          exit 0

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "http://${{ env.EC2_INSTANCE_IP }}:3000"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a -j -m 5 -T 60"
          allow_issue_writing: false
          fail_action: false
        continue-on-error: true

      - name: OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: "http://${{ env.EC2_INSTANCE_IP }}:3000"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a -j -m 5 -T 120"
          allow_issue_writing: false
          fail_action: false
        continue-on-error: true

      - name: Upload ZAP Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-results
          path: |
            report_html.html
            report_json.json
            report_md.md

  # =========================================================================
  # JOB 6: IAST - DataDog
  # =========================================================================
  iast-datadog-verification:
    name: üìä IAST - DataDog Runtime Analysis
    runs-on: ubuntu-latest
    needs: [check-prerequisites, build-and-deploy]
    if: needs.build-and-deploy.result == 'success'
    steps:
      - name: Generate Traffic for IAST Analysis
        run: |
          echo "Generating traffic for DataDog IAST analysis..."
          for i in {1..50}; do
            curl -s http://${{ env.EC2_INSTANCE_IP }}:3000 > /dev/null || true
            curl -s "http://${{ env.EC2_INSTANCE_IP }}:3000/rest/products/search?q=juice" > /dev/null || true
            curl -s http://${{ env.EC2_INSTANCE_IP }}:3000/api/Challenges > /dev/null || true
            curl -s http://${{ env.EC2_INSTANCE_IP }}:3000/rest/admin/application-version > /dev/null || true
            curl -X POST -s http://${{ env.EC2_INSTANCE_IP }}:3000/rest/user/login -d '{"email":"admin@juice-sh.op","password":"admin123"}' -H "Content-Type: application/json" > /dev/null || true
            sleep 1
          done
          echo "‚úÖ Generated 250+ requests for IAST analysis"

      - name: Verify DataDog Integration
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## üìä DataDog IAST Analysis
          **Status:** Traffic generated successfully
          **Dashboard:** [View IAST Results](https://app.us5.datadoghq.com/security/appsec?service=juice-shop)
          **Analysis Timeline:**
          - Traces appear: ~2-5 minutes
          - Vulnerability detection: ~5-10 minutes
          - Complete analysis: ~15 minutes
          EOF

  # =========================================================================
  # JOB 7: Security Report
  # =========================================================================
  security-report:
    name: üìã Generate Security Report
    runs-on: ubuntu-latest
    needs:
      [
        sast-semgrep,
        build-and-deploy,
        dast-owasp-zap,
        iast-datadog-verification,
      ]
    if: always()
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Generate Comprehensive Security Report
        run: |
          cat > security-report.md << 'EOF'
          # üîí DevSecOps Security Scan Report
          **Pipeline Run:** #${{ github.run_number }}  
          **Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')  
          **Branch:** ${{ github.ref_name }}  
          **Commit:** ${{ github.sha }}  
          **Instance:** ${{ env.EC2_INSTANCE_IP }}
          ---
          ## üìä Security Scan Results
          | Security Layer | Type | Status | Dashboard |
          |----------------|------|--------|-----------|
          | **Semgrep** | SAST | ${{ needs.sast-semgrep.result }} | [View](https://semgrep.dev/orgs/-/findings) |
          | **Aikido Zen** | RASP | Active | [View](https://app.aikido.dev) |
          | **DataDog** | IAST | ${{ needs.iast-datadog-verification.result }} | [View](https://app.us5.datadoghq.com/security/appsec) |
          | **OWASP ZAP** | DAST | ${{ needs.dast-owasp-zap.result }} | [Artifacts](https://github.com/${{ github.repository }}/actions/artifacts) |
          ---
          EOF

          cat security-report.md >> $GITHUB_STEP_SUMMARY

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
        continue-on-error: true
